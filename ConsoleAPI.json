{
  "openapi": "3.0.2",
  "info": {
    "title": "Console API",
    "version": "0.1.1",
    "license": {
      "url": "https://www.monext.fr/retail",
      "name": "Monext - All rights reserved"
    },
    "description": "# BASICS\n## Introduction\nThe Monext Retail API is RESTful, meaning that it uses HTTP verbs (POST, PUT, GET...) to perform functions on resources.\nSpecifically, POST is used to create a resource, PUT to update a resource, and GET to retrieve a resource or a collection of resources.\nFor example, to create a new wallet resource you would send a POST requests to Wallets.\nPOST and PUT requests usually require data to be passed in the message body to define the attributes of the object being created or updated.\n\n## Versioning The API version is indicated in each endpoint resource path. For example, [https://api-sandbox.console.retail.monext.com](https://api-sandbox.console.retail.monext.com) indicates the API is at version 1.\nMonext increments the version number when it releases a new version containing backwards-incompatible changes.\nSome minor changes, mostly for improvements, could happens without version changes.\n\n## Security The Monext Retail API processes sensitive data. That's why we pay special attention to security. * Monext data centers deploy the latest in hardware and software security best practices. * Communication with all Monext services requires TLS1.2. * All communication is made by using standard features of HTTPs. * Monext maintains PCI-DSS compliance certifications.\n## Responses Monext Retail API calls return HTTP status codes. Some API calls also return JSON response bodies that include information about the resource. When you create any Monext resource, the system associates an internal unique identifier for referencing that resource.\n**HTTP Status Code**\nEach API call returns a success or error HTTP status codes following the [RFC7231](https://tools.ietf.org/html/rfc7231).\n\n**Success**\nThe following status codes of HTTP are used:\n2xx - the request was successfully accepted and was or will be processed.\n\n**Error**\nThe following status codes of HTTP are used:\n4xx - the request was rejected due to a problem with the information sent by the client.\n5xx - something unexpected occurred while fulfilling the request; the request may or may not have been processed, depending on the error.\nWhenever a client receives a 5xx response, it should not assume anything about the processing state of such request. ## Authentication\n| Security Scheme Type      | HTTP  | Server | |---------------------------|-------|--------| | HTTP Authorization Scheme | basic |        |\n<br>\n"
  },
  "x-readme": {
    "explorer-enabled": true,
    "samples-languages": [
      "curl",
      "node",
      "javascript",
      "python",
      "kotlin",
      "swift"
    ],
    "proxy-enabled": true,
    "samples-enabled": true
  },
  "externalDocs": {
    "url": "https://api-docs.retail.monext.com/",
    "description": "Monext Online documentation"
  },
  "servers": [
    {
      "url": "https://api-sandbox.console.retail.monext.com"
    }
  ],
  "security": [
    {
      "basicAuth": []
    }
  ],
  "tags": [
    {
      "name": "MxWallet",
      "description": "Used for manage our mxWallet\n",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    }
  ],
  "paths": {
    "/v1/mxwallets/activate": {
      "patch": {
        "tags": [
          "MxWallet"
        ],
        "summary": "Enable or Disable a list of mxWallets",
        "operationId": "mxWalletActivate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MxWalletActivationRequest"
              }
            }
          },
          "required": true
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "mxWallet updated"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "links": {},
    "callbacks": {},
    "schemas": {
      "Result": {
        "title": "Result",
        "description": "Result",
        "required": [
          "title",
          "code",
          "detail"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "ACCEPTED, ERROR, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
            "example": "ERROR"
          },
          "code": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
            "example": "02305"
          },
          "detail": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "example": "Invalid field format, please refer to the user guide"
          }
        }
      },
      "SuccessfulResult": {
        "title": "SuccessfulResult",
        "description": "Successful result",
        "allOf": [
          {
            "$ref": "#/components/schemas/Result"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "description": "Result object in case of success or warning. ACCEPTED, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                "example": "ACCEPTED"
              },
              "code": {
                "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                "example": "00000"
              },
              "detail": {
                "example": "Sucessful"
              }
            }
          }
        ]
      },
      "BadRequestResult": {
        "title": "BadRequestResult",
        "description": "BadRequest result",
        "allOf": [
          {
            "$ref": "#/components/schemas/Result"
          },
          {
            "type": "object",
            "properties": {
              "invalidParams": {
                "description": "List of invalid fields and the appropriate format",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvalidParams"
                }
              }
            }
          }
        ]
      },
      "InvalidParams": {
        "title": "InvalidParams",
        "type": "object",
        "description": "List of invalid fields and the appropriate format",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "invalid field name"
          },
          "reason": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "expected format for the field",
            "example": "size must be between 3 and 4"
          },
          "codes": {
            "maxItems": 255,
            "minItems": 0,
            "type": "array",
            "description": "Translation error key",
            "example": "{form.group.error}",
            "items": {
              "type": "string",
              "description": "Translation error key",
              "example": "{form.group.error}"
            }
          },
          "arguments": {
            "maxItems": 255,
            "minItems": 0,
            "type": "array",
            "description": "Arguments error key",
            "example": 127,
            "items": {
              "type": "string",
              "description": "Arguments error key",
              "example": "127"
            }
          }
        }
      },
      "MxWalletActivationRequest": {
        "required": [
          "active",
          "ids"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Status of the mxWallet.<br> True=the list of mxWallet which will be enabled.<br> False=the list of mxWallet which will be disabled.",
            "example": true
          },
          "ids": {
            "description": "List of mxWallet id",
            "example": "['wallet1','wallet2']",
            "items": {
              "type": "string",
              "description": "list id",
              "example": "wallet123"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
