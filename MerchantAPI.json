{
  "openapi": "3.0.2",
  "info": {
    "title": "Merchant API",
    "version": "1.0.0",
    "license": {
      "url": "https://www.monext.fr/retail",
      "name": "Monext - All rights reserved"
    },
    "description": "# BASICS\n\n  ## Introduction\n\n  The Monext Retail API is RESTful, meaning that it uses HTTP verbs (POST, PUT, GET...) to perform functions on resources.\n\n  Specifically, POST is used to create a resource, PUT to update a resource, and GET to retrieve a resource or a collection of resources.\n\n  For example, to create a new wallet resource you would send a POST requests to Wallets.\n\n  POST and PUT requests usually require data to be passed in the message body to define the attributes of the object being created or updated.\n\n\n  ## Versioning\n  The API version is indicated in each endpoint resource path. For example, [https://api-sandbox.retail.monext.com/v1/checkout](https://api-sandbox.retail.monext.com/v1/checkout) indicates the API is at version 1.\n\n  Monext increments the version number when it releases a new version containing backwards-incompatible changes.\n\n  Some minor changes, mostly for improvements, could happens without version changes.\n\n\n  ## Security\n  The Monext Retail API processes sensitive data. That's why we pay special attention to security.\n  * Monext data centers deploy the latest in hardware and software security best practices.\n  * Communication with all Monext services requires TLS1.2.\n  * All communication is made by using standard features of HTTPs.\n  * Monext maintains PCI-DSS compliance certifications.\n\n  ## Responses\n  Monext Retail API calls return HTTP status codes. Some API calls also return JSON response bodies that include information about the resource.\n  When you create any Monext resource, the system associates an internal unique identifier for referencing that resource.\n\n  **HTTP Status Code**\n\n  Each API call returns a success or error HTTP status codes following the [RFC7231](https://tools.ietf.org/html/rfc7231).\n\n\n  **Success**\n\n  The following status codes of HTTP are used:\n\n  2xx - the request was successfully accepted and was or will be processed.\n\n\n  **Error**\n\n  The following status codes of HTTP are used:\n\n  4xx - the request was rejected due to a problem with the information sent by the client.\n\n  5xx - something unexpected occurred while fulfilling the request; the request may or may not have been processed, depending on the error.\n\n  Whenever a client receives a 5xx response, it should not assume anything about the processing state of such request.\n\n\n  ## Authentication\n\n  | Security Scheme Type      | HTTP  | Server |\n  |---------------------------|-------|--------|\n  | HTTP Authorization Scheme | basic |        |\n\n\n  ## Query\n  For most REST GET calls, you can specify one or more optional query parameters on the request URI to filter, limit the size of, and sort the data in an API response. For filter parameters, see the individual GET calls.\n\n\n  ## Sorting and Pagination\n  Rather than return everything from a large result set, we are using some URL parameters that will influence the page size and starting page number.\n\n  **Query parameter details**\n\n  | Parameter   | Type        | Description                                                             |\n  |-------------|-------------|-------------------------------------------------------------------------|\n  | size        | integer     | The number of items to list in the response.                            |\n  | page        | integer     | The page index.                                                         |\n  | sort        | string      | Sorts resources in the response by a specified value and sort direction.|\n\n  **Response field details**\n\n  | Parameter   | Type    | Description                                                       |\n  |-------------|---------|-------------------------------------------------------------------|\n  | count       | integer | The number of items to list in the response.                      |\n  | startIndex  | integer | The sort order index of the first resource in the returned array. |\n  | endIndex    | integer | The sort order index of the last resource in the returned array.  |\n  | recordTotal | integer | count of records                                                  |\n  <br>"
  },
  "x-readme": {
    "explorer-enabled": true,
    "samples-languages": [
      "curl",
      "node",
      "javascript",
      "python",
      "kotlin",
      "swift"
    ],
    "proxy-enabled": true,
    "samples-enabled": true
  },
  "externalDocs": {
    "url": "https://api-docs.retail.monext.com/",
    "description": "Monext Online documentation"
  },
  "servers": [
    {
      "url": "https://api-sandbox.retail.monext.com",
      "description": "Try our API on the sandbox (Homologation environment)"
    }
  ],
  "security": [
    {
      "basicAuth": []
    }
  ],
  "tags": [
    {
      "name": "Test"
    },
    {
      "name": "Point of sale",
      "description": "Services related to Point of Sale\n",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    },
    {
      "name": "Payment method",
      "description": "Services related to Payment method\n",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    }
  ],
  "paths": {
    "/v1/checkout/alive": {
      "get": {
        "tags": [
          "Test"
        ],
        "summary": "is it alive ?",
        "operationId": "alive",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/components": {
      "post": {
        "tags": [
          "Test"
        ],
        "summary": "See all component (develop environment)",
        "description": "Just to see all component (only in develop environment)\n",
        "operationId": "components",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AllComponents",
                "type": "object",
                "required": [
                  "result"
                ],
                "properties": {
                  "pointOfSale": {
                    "$ref": "#/components/schemas/PointOfSale"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/merchants/{merchantId}/pointsofsale": {
      "get": {
        "tags": [
          "Point of sale"
        ],
        "summary": "Get the points of sale",
        "description": "Retrieve the points of sale of a merchant.\n",
        "operationId": "getPointsOfSale",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PointsOfSaleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/merchants/{merchantId}/pointsofsale/{posReference}": {
      "get": {
        "tags": [
          "Point of sale"
        ],
        "summary": "Get a point of sale",
        "description": "Retrieve a point of sale of a merchant.\n",
        "operationId": "getPointOfSale",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "posReference",
            "in": "path",
            "description": "Point of sale reference <br> Unique in the merchant\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PointOfSaleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/merchants/{merchantId}/pointsofsale/{posReference}/paymentMethods": {
      "get": {
        "tags": [
          "Payment method"
        ],
        "summary": "Get the payment methods",
        "description": "Retrieve the payment methods of a merchant's point of sale.\n",
        "operationId": "getPaymentMethods",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "posReference",
            "in": "path",
            "description": "Point of sale reference <br> Unique in the merchant\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/merchants/{merchantId}/pointsofsale/{posReference}/paymentMethods/{paymentMethodId}": {
      "get": {
        "tags": [
          "Payment method"
        ],
        "summary": "Get a payment method",
        "description": "Retrieve a payment method\n",
        "operationId": "getPaymentMethod",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "posReference",
            "in": "path",
            "description": "Point of sale reference <br> Unique in the merchant\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "Payment Method identifier.<br> Unique in the merchant\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "links": {},
    "callbacks": {},
    "schemas": {
      "Result": {
        "title": "Result",
        "description": "Result",
        "required": [
          "title",
          "code",
          "detail"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "ACCEPTED, ERROR, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
            "example": "ERROR"
          },
          "code": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
            "example": "02305"
          },
          "detail": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "example": "Invalid field format, please refer to the user guide"
          }
        }
      },
      "SuccessfulResult": {
        "title": "SuccessfulResult",
        "description": "Successful result",
        "allOf": [
          {
            "$ref": "#/components/schemas/Result"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "description": "Result object in case of success or warning. ACCEPTED, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                "example": "ACCEPTED"
              },
              "code": {
                "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                "example": "00000"
              },
              "detail": {
                "example": "Sucessful"
              }
            }
          }
        ]
      },
      "BadRequestResult": {
        "title": "BadRequestResult",
        "description": "BadRequest result",
        "allOf": [
          {
            "$ref": "#/components/schemas/Result"
          },
          {
            "type": "object",
            "properties": {
              "invalidParams": {
                "description": "List of invalid fields and the appropriate format",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvalidParams"
                }
              }
            }
          }
        ]
      },
      "InvalidParams": {
        "title": "InvalidParams",
        "type": "object",
        "description": "List of invalid fields and the appropriate format",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "invalid field name"
          },
          "reason": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "expected format for the field",
            "example": "size must be between 3 and 4"
          },
          "codes": {
            "maxItems": 255,
            "minItems": 0,
            "type": "array",
            "description": "Translation error key",
            "example": "{form.group.error}",
            "items": {
              "type": "string",
              "description": "Translation error key",
              "example": "{form.group.error}"
            }
          },
          "arguments": {
            "maxItems": 255,
            "minItems": 0,
            "type": "array",
            "description": "Arguments error key",
            "example": 127,
            "items": {
              "type": "string",
              "description": "Arguments error key",
              "example": "127"
            }
          }
        }
      },
      "PointsOfSaleResponse": {
        "title": "PointsOfSaleResponse",
        "type": "object",
        "required": [
          "result",
          "pointsOfSale"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointOfSaleResponse/properties/result/allOf/0"
              }
            ]
          },
          "pointsOfSale": {
            "type": "array",
            "description": "List of a merchant's points of sale.",
            "items": {
              "$ref": "#/components/schemas/PointOfSale"
            }
          }
        }
      },
      "PointOfSaleResponse": {
        "title": "PointOfSaleResponse",
        "type": "object",
        "required": [
          "result",
          "pointOfSale"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "title": "SuccessfulResult",
                "description": "Successful result",
                "allOf": [
                  {
                    "title": "Result",
                    "description": "Result",
                    "required": [
                      "title",
                      "code",
                      "detail"
                    ],
                    "type": "object",
                    "properties": {
                      "title": {
                        "maxLength": 50,
                        "minLength": 0,
                        "type": "string",
                        "description": "ACCEPTED, ERROR, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "ERROR"
                      },
                      "code": {
                        "maxLength": 5,
                        "minLength": 0,
                        "type": "string",
                        "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "02305"
                      },
                      "detail": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string",
                        "description": "A human-readable explanation specific to this occurrence of the problem.",
                        "example": "Invalid field format, please refer to the user guide"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "title": {
                        "description": "Result object in case of success or warning. ACCEPTED, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "ACCEPTED"
                      },
                      "code": {
                        "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "00000"
                      },
                      "detail": {
                        "example": "Sucessful"
                      }
                    }
                  }
                ]
              }
            ]
          },
          "pointOfSale": {
            "$ref": "#/components/schemas/PointOfSale"
          }
        }
      },
      "PointOfSale": {
        "title": "PointOfSale",
        "type": "object",
        "required": [
          "reference",
          "name",
          "mcc"
        ],
        "properties": {
          "reference": {
            "$ref": "#/components/schemas/PointOfSaleReference"
          },
          "name": {
            "type": "string",
            "description": "Point of sale name <br> The current name for the point of sale.",
            "example": "MYSHOP.COM",
            "maxLength": 50,
            "minLength": 1
          },
          "legalIdentificationNumber": {
            "type": "string",
            "description": "Legal identification number of the point of sale such as SIRET in France or BRN (Business Registration Number).",
            "example": 45698745600021,
            "maxLength": 14,
            "minLength": 1
          },
          "mcc": {
            "type": "string",
            "description": "Merchant Category Code (MCC). <br> As defined by VISA and Mastercard standards and assigned by the acquirer.",
            "example": "5551",
            "maxLength": 4,
            "minLength": 4
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "comment": {
            "type": "string",
            "description": "Comment related to the Point of Sale.",
            "maxLength": 255,
            "minLength": 0,
            "example": "Lorem impusum color damet"
          }
        }
      },
      "PaymentMethodsResponse": {
        "title": "PaymentMethodsResponse",
        "type": "object",
        "required": [
          "result",
          "PaymentMethods"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointOfSaleResponse/properties/result/allOf/0"
              }
            ]
          },
          "paymentMethods": {
            "type": "array",
            "description": "List of a merchant's points of sale.",
            "items": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          }
        }
      },
      "PaymentMethodResponse": {
        "title": "PaymentMethodResponse",
        "type": "object",
        "required": [
          "result",
          "PaymentMethods"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointOfSaleResponse/properties/result/allOf/0"
              }
            ]
          },
          "paymentMethods": {
            "$ref": "#/components/schemas/PaymentMethod"
          }
        }
      },
      "PaymentMethod": {
        "title": "PaymentMethod",
        "type": "object",
        "required": [
          "id",
          "paymentInstrumentType",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PaymentMethodId"
          },
          "paymentInstrumentType": {
            "$ref": "#/components/schemas/PaymentInstrumentType"
          },
          "name": {
            "type": "string",
            "description": "Name of the payment method (maximum 50 characters).",
            "maxLength": 50,
            "example": "CB 3DS #1"
          },
          "description": {
            "type": "string",
            "description": "Description of the payment method (maximum 255 characters).",
            "maxLength": 255,
            "example": "Payment method CB, VISA, Mastercard with 3DS"
          },
          "acquirer": {
            "$ref": "#/components/schemas/Acquirer"
          },
          "acquirerMerchantId": {
            "type": "string",
            "description": "Acquirer merchant identifier (MID).<br> The MID represents the merchant's acquiring (contract) provided by their acquirer.",
            "example": "1234567"
          },
          "logo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Logo"
              },
              {
                "description": "Base64-encoded string representing the logo image for the payment method.<br> This image is intended to visually represent the payment method.<br> Max: 200x50<br>"
              }
            ]
          }
        }
      },
      "PaymentInstrumentType": {
        "title": "PaymentInstrumentType",
        "type": "object",
        "description": "Type of the payment instrument",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Monext instrument type code <br> To defined the payment instrument type : CB, PAYLPAL, AMEX, BANCONTACT, IDEAL ....",
            "example": "AMEX"
          },
          "name": {
            "type": "string",
            "description": "Commercial name of the payment instrument <br> Not yet implemented.",
            "example": "American Express"
          }
        }
      },
      "PointOfSaleReference": {
        "type": "string",
        "description": "Point of sale reference identifier (unique by Merchant).<br> It is set by the user during the creation of the point of sale and cannot be modified afterward.<br> Point of sale reference must:<br>\n  - Start and contain only an alphanumeric characters (A-Z, a-z, 0-9).<br>\n  - May include dots ('.'), hyphens ('-'), and underscores ('_').<br>\n  - Have a length between 1 and 50 characters.",
        "minimum": 1,
        "maximum": 50,
        "pattern": "^(?=.{1,50}$)[A-Za-z0-9]+[A-Za-z0-9\\.\\-_]+$",
        "example": "REF_1"
      },
      "PaymentMethodId": {
        "title": "PaymentMethodId",
        "type": "string",
        "description": "Payment method identifier (unique by Merchant).<br> It is set by the user during the creation of the payment method and cannot be modified afterward.<br> PaymentMethodId must:<br>\n  - Start and contain only an alphanumeric characters (A-Z, a-z, 0-9).<br>\n  - May include dots ('.'), hyphens ('-'), and underscores ('_').<br>\n  - Have a length between 1 and 50 characters.",
        "minimum": 1,
        "maximum": 50,
        "pattern": "^(?=.{1,50}$)[A-Za-z0-9]+[A-Za-z0-9\\.\\-_]+$",
        "example": "CB_001 or 123456"
      },
      "Email": {
        "title": "Email",
        "type": "string",
        "description": "Email address.",
        "maxLength": 150,
        "minLength": 0,
        "pattern": "^[\\w-\\.]+[\\w+]+@([\\w-]+\\.)+[\\w-]{2,4}$",
        "example": "john.doe@mail.com"
      },
      "Logo": {
        "title": "Logo",
        "type": "object",
        "description": "Base64-encoded string representing the logo",
        "properties": {
          "image": {
            "type": "string",
            "format": "base64",
            "description": "Base64-encoded string representing the logo image.<br>",
            "example": "iVBORw0KGgoAAAANSUhEUgAAAAUA..."
          },
          "mimeType": {
            "type": "string",
            "description": "Specifies the MIME type of the `logo` field, which determines the format of the image.<br> Supported MIME types include:<br> - `image/png`<br> - `image/jpeg`<br> - `image/gif`<br> - `image/svg+xml`<br>",
            "enum": [
              "image/png",
              "image/jpeg",
              "image/gif",
              "image/svg+xml"
            ],
            "example": "image/png"
          }
        }
      },
      "Acquirer": {
        "title": "Acquirer",
        "type": "object",
        "description": "Acquirer",
        "properties": {
          "code": {
            "type": "string",
            "description": "Acquirer code.",
            "example": "11899"
          },
          "name": {
            "type": "string",
            "description": "Acquirer name",
            "example": "CREDIT MUTUEL ARKEA"
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}