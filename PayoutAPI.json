{
  "openapi": "3.0.2",
  "info": {
    "title": "Payout API",
    "version": "1.0.6",
    "license": {
      "url": "https://www.monext.fr/retail",
      "name": "Monext - All rights reserved"
    },
    "description": "# BASICS\n\n  ## Introduction\n\n  The Monext Retail API is RESTful, meaning that it uses HTTP verbs (POST, PUT, GET...) to perform functions on resources.\n\n  Specifically, POST is used to create a resource, PUT to update a resource, and GET to retrieve a resource or a collection of resources.\n\n  For example, to create a new wallet resource you would send a POST requests to Wallets.\n\n  POST and PUT requests usually require data to be passed in the message body to define the attributes of the object being created or updated.\n\n\n  ## Versioning\n  The API version is indicated in each endpoint resource path. For example, [https://api-sandbox.retail.monext.com/v1/payout](https://api-sandbox.retail.monext.com/v1/payout) indicates the API is at version 1.\n\n  Monext increments the version number when it releases a new version containing backwards-incompatible changes.\n\n  Some minor changes, mostly for improvements, could happens without version changes.\n\n\n  ## Security\n  The Monext Retail API processes sensitive data. That's why we pay special attention to security.\n  * Monext data centers deploy the latest in hardware and software security best practices.\n  * Communication with all Monext services requires TLS1.2.\n  * All communication is made by using standard features of HTTPs.\n  * Monext maintains PCI-DSS compliance certifications.\n\n  ## Responses\n  Monext Retail API calls return HTTP status codes. Some API calls also return JSON response bodies that include information about the resource.\n  When you create any Monext resource, the system associates an internal unique identifier for referencing that resource.\n\n  **HTTP Status Code**\n\n  Each API call returns a success or error HTTP status codes following the [RFC7231](https://tools.ietf.org/html/rfc7231).\n\n\n  **Success**\n\n  The following status codes of HTTP are used:\n\n  2xx - the request was successfully accepted and was or will be processed.\n\n\n  **Error**\n\n  The following status codes of HTTP are used:\n\n  4xx - the request was rejected due to a problem with the information sent by the client.\n\n  5xx - something unexpected occurred while fulfilling the request; the request may or may not have been processed, depending on the error.\n\n  Whenever a client receives a 5xx response, it should not assume anything about the processing state of such request.\n\n\n  ## Authentication\n\n  | Security Scheme Type      | HTTP  | Server |\n  |---------------------------|-------|--------|\n  | HTTP Authorization Scheme | basic |        |\n\n\n  ## Query\n  For most REST GET calls, you can specify one or more optional query parameters on the request URI to filter, limit the size of, and sort the data in an API response. For filter parameters, see the individual GET calls.\n\n\n  ## Sorting and Pagination\n  Rather than return everything from a large result set, we are using some URL parameters that will influence the page size and starting page number.\n\n  **Query parameter details**\n\n  | Parameter   | Type        | Description                                                             |\n  |-------------|-------------|-------------------------------------------------------------------------|\n  | size        | integer     | The number of items to list in the response.                            |\n  | page        | integer     | The page index.                                                         |\n  | sort        | string      | Sorts resources in the response by a specified value and sort direction.|\n\n  **Response field details**\n\n  | Parameter   | Type    | Description                                                       |\n  |-------------|---------|-------------------------------------------------------------------|\n  | count       | integer | The number of items to list in the response.                      |\n  | startIndex  | integer | The sort order index of the first resource in the returned array. |\n  | endIndex    | integer | The sort order index of the last resource in the returned array.  |\n  | recordTotal | integer | count of records                                                  |\n  <br>"
  },
  "x-readme": {
    "explorer-enabled": true,
    "samples-languages": [
      "curl",
      "node",
      "javascript",
      "python",
      "kotlin",
      "swift"
    ],
    "proxy-enabled": true,
    "samples-enabled": true
  },
  "externalDocs": {
    "url": "https://api-docs.retail.monext.com/",
    "description": "Monext Online documentation"
  },
  "servers": [
    {
      "url": "https://api-sandbox.retail.monext.com",
      "description": "Try our API on the sandbox (Homologation environment)"
    },
    {
      "url": "https://develop-dev2-rest-api.ext.dev.payline.com",
      "description": "docker DEV2"
    },
    {
      "url": "https://admin.dev.payline.com/new-api",
      "description": "Recette (DEV2)"
    }
  ],
  "security": [
    {
      "basicAuth": []
    }
  ],
  "tags": [
    {
      "name": "Test"
    },
    {
      "name": "Transfer",
      "description": "Starts a request to payout funds to a bank account.",
      "externalDocs": {
        "description": "Documentation",
        "url": "https://docs.monext.fr/display/DT/Transfert+bancaire+pour+Marketplace"
      }
    },
    {
      "name": "Transaction",
      "description": "Manage bank transfer transactions",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    }
  ],
  "paths": {
    "/v1/checkout/alive": {
      "get": {
        "tags": [
          "Test"
        ],
        "summary": "is it alive ?",
        "operationId": "alive",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payout/components": {
      "post": {
        "tags": [
          "Test"
        ],
        "summary": "See all component (develop environment)",
        "description": "Just to see all component (only in develop environment)\n",
        "operationId": "components",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AllComponents",
                "type": "object",
                "required": [
                  "result"
                ],
                "properties": {
                  "transaction": {
                    "$ref": "#/components/schemas/TransactionTransfer"
                  },
                  "bankAccount": {
                    "$ref": "#/components/schemas/BankAccount"
                  },
                  "bankAccountData": {
                    "$ref": "#/components/schemas/BankAccountData"
                  },
                  "usedBankAccounts": {
                    "$ref": "#/components/schemas/UsedBankAccounts"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/payout/sepatransfers": {
      "post": {
        "tags": [
          "Transfer"
        ],
        "summary": "Create a SEPA bank transfer",
        "description": "Enables seamless bank transfers, serving a range of purposes including handling refunds for complex payment methods and supporting marketplace transactions or third-party payment settlements.\n",
        "operationId": "sepaBankTransferCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankTransferRequest"
              },
              "examples": {
                "example1": {
                  "summary": "A simple SEPA Bank transfer",
                  "value": {
                    "amount": 10000,
                    "currency": "EUR",
                    "payerBankAccount": {
                      "paymentMethodId": "BANK_TRANSFER_1"
                    },
                    "payeeBankAccount": {
                      "bic": "BDFEFR2L",
                      "iban": "FR7630001007941234567890185",
                      "holderName": "John Do"
                    },
                    "comment": "blablabla"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankTransferResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/payout/transactions/{id}": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get a payout transaction detail",
        "description": "Retrieves a payout transaction corresponding to the transaction ID.\n",
        "operationId": "payoutTransactionGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payout transaction unique identifier",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123456890"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "links": {},
    "callbacks": {},
    "schemas": {
      "Result": {
        "title": "Result",
        "description": "Result",
        "required": [
          "title",
          "code",
          "detail"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "ACCEPTED, ERROR, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
            "example": "ERROR"
          },
          "code": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
            "example": "02305"
          },
          "detail": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "example": "Invalid field format, please refer to the user guide"
          }
        }
      },
      "SuccessfulResult": {
        "title": "SuccessfulResult",
        "description": "Successful result",
        "allOf": [
          {
            "$ref": "#/components/schemas/Result"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "description": "Result object in case of success or warning. ACCEPTED, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                "example": "ACCEPTED"
              },
              "code": {
                "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                "example": "00000"
              },
              "detail": {
                "example": "Sucessful"
              }
            }
          }
        ]
      },
      "BadRequestResult": {
        "title": "BadRequestResult",
        "description": "BadRequest result",
        "allOf": [
          {
            "$ref": "#/components/schemas/Result"
          },
          {
            "type": "object",
            "properties": {
              "invalidParams": {
                "description": "List of invalid fields and the appropriate format",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvalidParams"
                }
              }
            }
          }
        ]
      },
      "InvalidParams": {
        "title": "InvalidParams",
        "type": "object",
        "description": "List of invalid fields and the appropriate format",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "invalid field name"
          },
          "reason": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "expected format for the field",
            "example": "size must be between 3 and 4"
          },
          "codes": {
            "maxItems": 255,
            "minItems": 0,
            "type": "array",
            "description": "Translation error key",
            "example": "{form.group.error}",
            "items": {
              "type": "string",
              "description": "Translation error key",
              "example": "{form.group.error}"
            }
          },
          "arguments": {
            "maxItems": 255,
            "minItems": 0,
            "type": "array",
            "description": "Arguments error key",
            "example": 127,
            "items": {
              "type": "string",
              "description": "Arguments error key",
              "example": "127"
            }
          }
        }
      },
      "BankAccount": {
        "title": "BankAccount",
        "allOf": [
          {
            "title": "BankAccountBase",
            "type": "object",
            "description": "BankAccountBase",
            "properties": {
              "bic": {
                "type": "string",
                "description": "The BIC (Bank Identifier Code)is an international identifier for a bank.",
                "example": "BDFEFR2L"
              },
              "holderName": {
                "type": "string",
                "description": "The full name of the account holder.",
                "example": "John Do"
              }
            }
          },
          {
            "type": "object",
            "description": "Information about the bank account.",
            "required": [
              "bic",
              "iban"
            ],
            "properties": {
              "iban": {
                "type": "string",
                "description": "The IBAN (International Bank Account Number) is a sequence of numbers and letters that breaks down as follows: <br> The first two letters represent the country code (e.g., FR for France). <br> They are followed by a two-digit check key. The remaining part represents the bank account number. <br> The IBAN is sensitive data; in this field, most characters are masked.",
                "example": "FR7630001007941234567890185"
              }
            }
          }
        ]
      },
      "BankAccountData": {
        "title": "BankAccount",
        "allOf": [
          {
            "$ref": "#/components/schemas/BankAccount/allOf/0"
          },
          {
            "type": "object",
            "description": "Information about the bank account.<br> Used in response.",
            "required": [
              "bic",
              "maskedIban"
            ],
            "properties": {
              "maskedIban": {
                "type": "string",
                "description": "The IBAN (International Bank Account Number) is a sequence of numbers and letters that breaks down as follows: <br> The first two letters represent the country code (e.g., FR for France). <br> They are followed by a two-digit check key. The remaining part represents the bank account number. <br> The IBAN is sensitive data; in this field, most characters are masked.",
                "example": "FR76XXXXXXXXXXXXXXXXXXXXX85"
              },
              "country": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Country"
                  }
                ],
                "default": ""
              }
            }
          }
        ]
      },
      "UsedBankAccounts": {
        "title": "UsedBankAccounts",
        "type": "object",
        "required": [
          "payerBankAccount",
          "payeeBankAccount",
          "amount",
          "currency"
        ],
        "properties": {
          "payerBankAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccountData"
              },
              {
                "type": "object",
                "description": "The payer (debtor) bank account data"
              }
            ]
          },
          "payeeBankAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccountData"
              },
              {
                "type": "object",
                "description": "The payee (creditor) bank account data"
              }
            ]
          }
        }
      },
      "TransactionBase": {
        "title": "TransactionBase",
        "type": "object",
        "description": "Details of the payment transaction",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Monext transaction identifier.",
            "maxLength": 50,
            "minLength": 0,
            "example": "127382"
          },
          "date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date",
                "description": "Processing date and time of the transaction.<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ"
              }
            ]
          }
        }
      },
      "TransactionTransfer": {
        "title": "Transaction",
        "type": "object",
        "description": "Details of the transfer transaction.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionBase"
          },
          {
            "type": "object",
            "description": "Details of the payment transaction.",
            "properties": {
              "type": {
                "title": "TransactionType",
                "type": "string",
                "description": "Type of transaction<br> Specify the bank transfer transaction with 'TRANSFER' value",
                "enum": [
                  "TRANSFER"
                ],
                "default": "TRANSFER",
                "example": "TRANSFER"
              },
              "usedBankAccounts": {
                "$ref": "#/components/schemas/UsedBankAccounts"
              },
              "amount": {
                "$ref": "#/components/schemas/Amount"
              },
              "currency": {
                "$ref": "#/components/schemas/Currency"
              },
              "comment": {
                "type": "string"
              }
            }
          }
        ]
      },
      "OrderReference": {
        "title": "OrderReference",
        "pattern": "[^//]*",
        "type": "string",
        "description": "Merchant order reference.<br> Unique order reference defined by the merchant. This reference is used in our duplicate detection system.",
        "maxLength": 50,
        "minLength": 0,
        "example": "550e8400-e29b-41d4-a716-446655440000"
      },
      "PaymentType": {
        "title": "PaymentType",
        "type": "string",
        "description": "#\n  This parameter specifies the payment use case.<br>\n  For example:  for a single payment, set it to ONE_OFF, for an account verification request set it to ACCOUNT_VERIFICATION, …<br>\n  [See paymentType attribute values page](/reference/paymenttype-attribute-values)",
        "enum": [
          "ONE_OFF",
          "MX_INSTALLMENT",
          "MX_RECURRING",
          "ACCOUNT_VERIFICATION",
          "RECURRING",
          "INSTALLMENT",
          "PRE_ORDER",
          "UNSCHEDULED",
          "RENTAL_SERVICES_PAYMENT",
          "DELAYED_CHARGE",
          "NO_SHOW",
          "CREDIT",
          "MULTIPLE_MERCHANTS",
          "BANK_TRANSFER"
        ],
        "default": "ONE_OFF",
        "example": "ONE_OFF"
      },
      "TransactionType": {
        "title": "TransactionType",
        "type": "string",
        "description": "Type of transaction<br> Specify whether it is an authorization, a capture, a refund, ...",
        "enum": [
          "AUTHORIZATION",
          "CAPTURE",
          "CANCEL",
          "REFUND",
          "CREDIT",
          "AUTHORIZATION_AND_CAPTURE",
          "ORDER",
          "REAUTHORIZATION_AND_CAPTURE",
          "DEBIT",
          "CHEQUE_SCORING",
          "REAUTHORIZATION",
          "AUTHORIZATION_AND_CAPTURE_COMPLEMENT",
          "SIGNATURE",
          "ACCOUNT_VERIFICATION"
        ]
      },
      "Capture": {
        "title": "Capture",
        "type": "string",
        "description": "This parameter specifies how the merchant want the transaction to be captured : <br>\n - automatically by Monext at order time, AUTOMATIC ; <br>\n - later at the merchant initiative, MANUAL ; <br>\n - or automatically by Monext at a later time, DEFERRED.\n\nDefault value : AUTOMATIC",
        "enum": [
          "AUTOMATIC",
          "MANUAL",
          "DEFERRED"
        ],
        "default": "AUTOMATIC",
        "example": "AUTOMATIC"
      },
      "PrivateData": {
        "title": "PrivateData",
        "type": "object",
        "additionalProperties": {
          "type": "string",
          "description": "${privateData.transaction.desc}",
          "example": "{\"property1\":\"value1\",\"property2\":\"value2\"}"
        },
        "description": "Additional data to be used throughout the payment lifecycle.<br> A dictionary of key-value pairs where the values can only be strings.<br> e.g. {\"suborderid\": \"AE-3023-001\", \"chanel\": \"mobile\"}",
        "example": {
          "property1": "value1",
          "property2": "value2"
        }
      },
      "Country": {
        "title": "Country",
        "enum": [
          "AW",
          "AF",
          "AO",
          "AI",
          "AX",
          "AL",
          "AD",
          "AE",
          "AR",
          "AM",
          "AS",
          "AQ",
          "TF",
          "AG",
          "AU",
          "AT",
          "AZ",
          "BI",
          "BE",
          "BJ",
          "BQ",
          "BF",
          "BD",
          "BG",
          "BH",
          "BS",
          "BA",
          "BL",
          "BY",
          "BZ",
          "BM",
          "BO",
          "BR",
          "BB",
          "BN",
          "BT",
          "BV",
          "BW",
          "CF",
          "CA",
          "CC",
          "CH",
          "CL",
          "CN",
          "CI",
          "CM",
          "CD",
          "CG",
          "CK",
          "CO",
          "KM",
          "CV",
          "CR",
          "CU",
          "CW",
          "CX",
          "KY",
          "CY",
          "CZ",
          "DE",
          "DJ",
          "DM",
          "DK",
          "DO",
          "DZ",
          "EC",
          "EG",
          "ER",
          "EH",
          "ES",
          "EE",
          "ET",
          "FI",
          "FJ",
          "FK",
          "FR",
          "FO",
          "FM",
          "GA",
          "GB",
          "GE",
          "GG",
          "GH",
          "GI",
          "GN",
          "GP",
          "GM",
          "GW",
          "GQ",
          "GR",
          "GD",
          "GL",
          "GT",
          "GF",
          "GU",
          "GY",
          "HK",
          "HM",
          "HN",
          "HR",
          "HT",
          "HU",
          "ID",
          "IM",
          "IN",
          "IO",
          "IE",
          "IR",
          "IQ",
          "IS",
          "IL",
          "IT",
          "JM",
          "JE",
          "JO",
          "JP",
          "KZ",
          "KE",
          "KG",
          "KH",
          "KI",
          "KN",
          "KR",
          "KW",
          "LA",
          "LB",
          "LR",
          "LY",
          "LC",
          "LI",
          "LK",
          "LS",
          "LT",
          "LU",
          "LV",
          "MO",
          "MF",
          "MA",
          "MC",
          "MD",
          "MG",
          "MV",
          "MX",
          "MH",
          "MK",
          "ML",
          "MT",
          "MM",
          "ME",
          "MN",
          "MP",
          "MZ",
          "MR",
          "MS",
          "MQ",
          "MU",
          "MW",
          "MY",
          "YT",
          "NA",
          "NC",
          "NE",
          "NF",
          "NG",
          "NI",
          "NU",
          "NL",
          "NO",
          "NP",
          "NR",
          "NZ",
          "OM",
          "PK",
          "PA",
          "PN",
          "PE",
          "PH",
          "PW",
          "PG",
          "PL",
          "PR",
          "KP",
          "PT",
          "PY",
          "PS",
          "PF",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "SA",
          "SD",
          "SN",
          "SG",
          "GS",
          "SH",
          "SJ",
          "SB",
          "SL",
          "SV",
          "SM",
          "SO",
          "PM",
          "RS",
          "SS",
          "ST",
          "SR",
          "SK",
          "SI",
          "SE",
          "SZ",
          "SX",
          "SC",
          "SY",
          "TC",
          "TD",
          "TG",
          "TH",
          "TJ",
          "TK",
          "TM",
          "TL",
          "TO",
          "TT",
          "TN",
          "TR",
          "TV",
          "TW",
          "TZ",
          "UG",
          "UA",
          "UM",
          "UY",
          "US",
          "UZ",
          "VA",
          "VC",
          "VE",
          "VG",
          "VI",
          "VN",
          "VU",
          "WF",
          "WS",
          "YE",
          "ZA",
          "ZM",
          "ZW"
        ],
        "description": "2-letter country code, see [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) <br> example : <code>FR</code> for France",
        "maxLength": 2,
        "minLength": 2,
        "default": "FR",
        "example": "FR"
      },
      "Date": {
        "title": "Date",
        "type": "string",
        "description": "Date and time<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ",
        "format": "date-time",
        "example": "2020-03-27T12:45:00Z"
      },
      "Amount": {
        "title": "Amount",
        "description": "The amount is expressed in the smallest currency unit.<br> For example, 1€ value must be 100.<br> Shall be set to 0 for an account verification query.",
        "type": "integer",
        "format": "int64",
        "maximum": 1000000000000000000,
        "minimum": 0,
        "example": 1000
      },
      "Currency": {
        "title": "Currency",
        "type": "string",
        "enum": [
          "EUR",
          "AED",
          "AFN",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BOV",
          "BRL",
          "BSD",
          "BTN",
          "BWP",
          "BYR",
          "BYN",
          "BZD",
          "CAD",
          "CDF",
          "CHE",
          "CHF",
          "CHW",
          "CLF",
          "CLP",
          "CNY",
          "COP",
          "COU",
          "CRC",
          "CUC",
          "CUP",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ERN",
          "ETB",
          "FJD",
          "FKP",
          "GBP",
          "GEL",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "IQD",
          "IRR",
          "ISK",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KPW",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LTL",
          "LVL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MRO",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MXV",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SDG",
          "SEK",
          "SGD",
          "SHP",
          "SLL",
          "SOS",
          "SRD",
          "SSP",
          "STD",
          "SVC",
          "SYP",
          "SZL",
          "THB",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "USN",
          "USS",
          "UYI",
          "UYU",
          "UZS",
          "VEF",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XAG",
          "XAU",
          "XBA",
          "XBB",
          "XBC",
          "XBD",
          "XCD",
          "XDR",
          "XFU",
          "XOF",
          "XPD",
          "XPF",
          "XPT",
          "XSU",
          "XTS",
          "XUA",
          "YER",
          "ZAR",
          "ZMW",
          "ZWL"
        ],
        "description": "The 3-letter currency code in ISO 4217 format. e.g. use EUR for Euro. Format : https://en.wikipedia.org/wiki/ISO_4217#Active_codes",
        "maxLength": 3,
        "minLength": 3,
        "default": "EUR",
        "example": "EUR"
      },
      "PaymentMethodId": {
        "title": "PaymentMethodId",
        "type": "string",
        "description": "Payment method identifier (unique by Merchant).<br> It is set by the user during the creation of the payment method and cannot be modified afterward.<br> PaymentMethodId must:<br>\n  - Start and contain only an alphanumeric characters (A-Z, a-z, 0-9).<br>\n  - May include dots ('.'), hyphens ('-'), and underscores ('_').<br>\n  - Have a length between 1 and 50 characters.",
        "minimum": 1,
        "maximum": 50,
        "pattern": "^(?=.{1,50}$)[A-Za-z0-9]+[A-Za-z0-9\\.\\-_]+$",
        "example": "CB_001 or 123456"
      },
      "BankTransferRequest": {
        "title": "BankTransferRequest",
        "description": "Request object to create a bank tranfer",
        "type": "object",
        "required": [
          "amount",
          "currency",
          "payerBankAccount",
          "payeeBankAccount"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "payerBankAccount": {
            "title": "PayerBankAccount",
            "type": "object",
            "description": "Information about the payer bank account.",
            "required": [
              "paymentMethodId"
            ],
            "properties": {
              "paymentMethodId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentMethodId"
                  },
                  {
                    "description": "A payment method ID of the payment instrument type BANKTRANSFER attached to your point of sale.<br> It refers to the bank account of the payer."
                  },
                  {
                    "example": "BANK_TRANSFER_1"
                  }
                ]
              }
            }
          },
          "payeeBankAccount": {
            "title": "BankAccount",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccount"
              },
              {
                "description": "Information about the payee bank account."
              },
              {
                "required": [
                  "bic",
                  "holderName",
                  "iban"
                ]
              }
            ]
          },
          "crossReference": {
            "type": "object",
            "description": "set of attributes associated with a Monext transaction. Useful for linking payouts to Monext transactions.<br> Leave crossReference empty, if you don't want the transfer to be associated with a payment transaction. In such cases, ensure that the SCT control in the payment method is disabled.\n",
            "properties": {
              "orderReference": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OrderReference"
                  }
                ]
              },
              "transactionId": {
                "type": "string",
                "description": "Unique Monext transaction identifier.",
                "maxLength": 50,
                "minLength": 0,
                "example": "127382"
              }
            }
          },
          "comment": {
            "type": "string",
            "description": "Comment about the bank transfer",
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^<>]*$",
            "example": "A comment."
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          }
        }
      },
      "BankTransferResponse": {
        "title": "BankTransferResponse",
        "description": "The response object returned by the Transfer service.",
        "type": "object",
        "required": [
          "result",
          "truc"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "title": "SuccessfulResult",
                "description": "Successful result",
                "allOf": [
                  {
                    "title": "Result",
                    "description": "Result",
                    "required": [
                      "title",
                      "code",
                      "detail"
                    ],
                    "type": "object",
                    "properties": {
                      "title": {
                        "maxLength": 50,
                        "minLength": 0,
                        "type": "string",
                        "description": "ACCEPTED, ERROR, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "ERROR"
                      },
                      "code": {
                        "maxLength": 5,
                        "minLength": 0,
                        "type": "string",
                        "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "02305"
                      },
                      "detail": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string",
                        "description": "A human-readable explanation specific to this occurrence of the problem.",
                        "example": "Invalid field format, please refer to the user guide"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "title": {
                        "description": "Result object in case of success or warning. ACCEPTED, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "ACCEPTED"
                      },
                      "code": {
                        "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "00000"
                      },
                      "detail": {
                        "example": "Sucessful"
                      }
                    }
                  }
                ]
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "transaction": {
            "description": "bank tranfer transaction.",
            "$ref": "#/components/schemas/TransactionTransfer"
          }
        }
      },
      "TransactionDetailResponse": {
        "title": "TransactionDetailResponse",
        "description": "The response object returned by the \"Get a payout transaction detail\" service.",
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankTransferResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "transaction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTransfer"
              },
              {
                "description": "The payout transaction associated with the provided ID."
              }
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
