{
  "openapi": "3.0.2",
  "info": {
    "title": "Checkout API",
    "version": "1.23.0",
    "license": {
      "url": "https://www.monext.fr/retail",
      "name": "Monext - All rights reserved"
    },
    "description": "# BASICS\n\n  ## Introduction\n\n  The Monext Retail API is RESTful, meaning that it uses HTTP verbs (POST, PUT, GET...) to perform functions on resources.\n\n  Specifically, POST is used to create a resource, PUT to update a resource, and GET to retrieve a resource or a collection of resources.\n\n  For example, to create a new wallet resource you would send a POST requests to Wallets.\n\n  POST and PUT requests usually require data to be passed in the message body to define the attributes of the object being created or updated.\n\n\n  ## Versioning\n  The API version is indicated in each endpoint resource path. For example, [https://api-sandbox.retail.monext.com/v1/checkout](https://api-sandbox.retail.monext.com/v1/checkout) indicates the API is at version 1.\n\n  Monext increments the version number when it releases a new version containing backwards-incompatible changes.\n\n  Some minor changes, mostly for improvements, could happens without version changes.\n\n\n  ## Security\n  The Monext Retail API processes sensitive data. That's why we pay special attention to security.\n  * Monext data centers deploy the latest in hardware and software security best practices.\n  * Communication with all Monext services requires TLS1.2.\n  * All communication is made by using standard features of HTTPs.\n  * Monext maintains PCI-DSS compliance certifications.\n\n  ## Responses\n  Monext Retail API calls return HTTP status codes. Some API calls also return JSON response bodies that include information about the resource.\n  When you create any Monext resource, the system associates an internal unique identifier for referencing that resource.\n\n  **HTTP Status Code**\n\n  Each API call returns a success or error HTTP status codes following the [RFC7231](https://tools.ietf.org/html/rfc7231).\n\n\n  **Success**\n\n  The following status codes of HTTP are used:\n\n  2xx - the request was successfully accepted and was or will be processed.\n\n\n  **Error**\n\n  The following status codes of HTTP are used:\n\n  4xx - the request was rejected due to a problem with the information sent by the client.\n\n  5xx - something unexpected occurred while fulfilling the request; the request may or may not have been processed, depending on the error.\n\n  Whenever a client receives a 5xx response, it should not assume anything about the processing state of such request.\n\n\n  ## Authentication\n\n  | Security Scheme Type      | HTTP  | Server |\n  |---------------------------|-------|--------|\n  | HTTP Authorization Scheme | basic |        |\n\n\n  ## Query\n  For most REST GET calls, you can specify one or more optional query parameters on the request URI to filter, limit the size of, and sort the data in an API response. For filter parameters, see the individual GET calls.\n\n\n  ## Sorting and Pagination\n  Rather than return everything from a large result set, we are using some URL parameters that will influence the page size and starting page number.\n\n  **Query parameter details**\n\n  | Parameter   | Type        | Description                                                             |\n  |-------------|-------------|-------------------------------------------------------------------------|\n  | size        | integer     | The number of items to list in the response.                            |\n  | page        | integer     | The page index.                                                         |\n  | sort        | string      | Sorts resources in the response by a specified value and sort direction.|\n\n  **Response field details**\n\n  | Parameter   | Type    | Description                                                       |\n  |-------------|---------|-------------------------------------------------------------------|\n  | count       | integer | The number of items to list in the response.                      |\n  | startIndex  | integer | The sort order index of the first resource in the returned array. |\n  | endIndex    | integer | The sort order index of the last resource in the returned array.  |\n  | recordTotal | integer | count of records                                                  |\n  <br>"
  },
  "x-readme": {
    "explorer-enabled": true,
    "samples-languages": [
      "curl",
      "node",
      "javascript",
      "python",
      "kotlin",
      "swift"
    ],
    "proxy-enabled": true,
    "samples-enabled": true
  },
  "externalDocs": {
    "url": "https://api-docs.retail.monext.com/",
    "description": "Monext Online documentation"
  },
  "servers": [
    {
      "url": "https://api-sandbox.retail.monext.com",
      "description": "Try our API on the sandbox (Homologation environment)"
    }
  ],
  "security": [
    {
      "basicAuth": []
    }
  ],
  "tags": [
    {
      "name": "Test"
    },
    {
      "name": "Session [DEPRECATED]",
      "description": "[DEPRECATED] Please see \"Payment / Session\" section\n",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    },
    {
      "name": "Payment",
      "description": "Used for a payment\n",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    },
    {
      "name": "Payment / Session",
      "description": "Used for a web payment session\n",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    },
    {
      "name": "PayByLink",
      "description": "Used for a payment by link\n",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    },
    {
      "name": "MXWallet",
      "description": "Used for manage our MXWallet\n",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    },
    {
      "name": "MXWallet / Payment Instrument",
      "description": "Used for manage Payment Instrument in a MXWallet\n",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    },
    {
      "name": "MXWallet / Session",
      "description": "Used for manage a MXWallet in web session\n",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    },
    {
      "name": "Transaction",
      "description": "Used for manage transaction",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    },
    {
      "name": "3DS Authentication",
      "description": "3DSecure (3DS) authentication session",
      "externalDocs": {
        "description": "Documentation",
        "url": "#"
      }
    }
  ],
  "paths": {
    "/v1/checkout/alive": {
      "get": {
        "tags": [
          "Test"
        ],
        "summary": "is it alive ?",
        "operationId": "alive",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/components": {
      "post": {
        "tags": [
          "Test"
        ],
        "summary": "See all component (develop environment)",
        "description": "Just to see all component (only in develop environment)\n",
        "operationId": "components",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AllComponents",
                "type": "object",
                "required": [
                  "result"
                ],
                "properties": {
                  "authenticationVerifyRequest": {
                    "$ref": "#/components/schemas/AuthenticationVerifyRequest"
                  },
                  "authenticationVerifyResponse": {
                    "$ref": "#/components/schemas/AuthenticationVerifyResponse"
                  },
                  "authenticationCreateRequest": {
                    "$ref": "#/components/schemas/AuthenticationCreateRequest"
                  },
                  "authenticationContinueRequest": {
                    "$ref": "#/components/schemas/AuthenticationContinueRequest"
                  },
                  "authenticationResponse": {
                    "$ref": "#/components/schemas/AuthenticationResponse"
                  },
                  "miscData": {
                    "$ref": "#/components/schemas/MiscData"
                  },
                  "transactionPayment": {
                    "$ref": "#/components/schemas/TransactionPayment"
                  },
                  "transactionAction": {
                    "$ref": "#/components/schemas/TransactionAction"
                  },
                  "payment": {
                    "$ref": "#/components/schemas/Payment"
                  },
                  "recurring": {
                    "$ref": "#/components/schemas/RecurringPayment"
                  },
                  "paymentPlan": {
                    "$ref": "#/components/schemas/PaymentPlan"
                  },
                  "installment": {
                    "$ref": "#/components/schemas/Installment"
                  },
                  "paymentMethod": {
                    "$ref": "#/components/schemas/PaymentMethod"
                  },
                  "order": {
                    "$ref": "#/components/schemas/Order"
                  },
                  "buyer": {
                    "$ref": "#/components/schemas/Buyer"
                  },
                  "buyerData": {
                    "$ref": "#/components/schemas/BuyerData"
                  },
                  "delivery": {
                    "$ref": "#/components/schemas/Delivery"
                  },
                  "person": {
                    "$ref": "#/components/schemas/Person"
                  },
                  "personEx": {
                    "$ref": "#/components/schemas/PersonEx"
                  },
                  "contactAddress": {
                    "$ref": "#/components/schemas/ContactAddress"
                  },
                  "partnerReturnedData": {
                    "$ref": "#/components/schemas/PartnerReturnedData"
                  },
                  "sessionRequest": {
                    "$ref": "#/components/schemas/SessionRequest"
                  },
                  "sessionResponse": {
                    "$ref": "#/components/schemas/SessionResponse"
                  },
                  "sessionDetailResponse": {
                    "$ref": "#/components/schemas/SessionDetailResponse"
                  },
                  "paymentRequest": {
                    "$ref": "#/components/schemas/PaymentRequest"
                  },
                  "paymentResponse": {
                    "$ref": "#/components/schemas/PaymentResponse"
                  },
                  "mxWalletRequest": {
                    "$ref": "#/components/schemas/MXWalletRequest"
                  },
                  "mxWalletCreateRequest": {
                    "$ref": "#/components/schemas/MXWalletCreateRequest"
                  },
                  "mxWalletResponse": {
                    "$ref": "#/components/schemas/MXWalletResponse"
                  },
                  "PaymentInstrumentRequest": {
                    "$ref": "#/components/schemas/PaymentInstrumentRequest"
                  },
                  "paymentInstrumentResult": {
                    "$ref": "#/components/schemas/PaymentInstrumentResult"
                  },
                  "transactionActionRequest": {
                    "$ref": "#/components/schemas/TransactionActionRequest"
                  },
                  "transactionActionResponse": {
                    "$ref": "#/components/schemas/TransactionActionResponse"
                  },
                  "transactionDetailResponse": {
                    "$ref": "#/components/schemas/TransactionDetailResponse"
                  },
                  "associatedTransaction": {
                    "$ref": "#/components/schemas/AssociatedTransaction"
                  },
                  "threeDSInfo": {
                    "$ref": "#/components/schemas/ThreeDSInfo"
                  },
                  "cardManualEntry": {
                    "$ref": "#/components/schemas/CardManualEntry"
                  },
                  "usedCard": {
                    "$ref": "#/components/schemas/UsedCard"
                  },
                  "mxWalet": {
                    "$ref": "#/components/schemas/MXWallet"
                  },
                  "mxWalletDetail": {
                    "$ref": "#/components/schemas/MXWalletDetail"
                  },
                  "bankAccountData": {
                    "$ref": "#/components/schemas/BankAccountData"
                  },
                  "paymentInstrument": {
                    "$ref": "#/components/schemas/PaymentInstrument"
                  },
                  "paymentInstrumentOrigin": {
                    "$ref": "#/components/schemas/PaymentInstrumentOrigin"
                  },
                  "paymentInstrumentData": {
                    "$ref": "#/components/schemas/PaymentInstrumentData"
                  },
                  "paymentInstrumentType": {
                    "$ref": "#/components/schemas/PaymentInstrumentType"
                  },
                  "paymentType": {
                    "$ref": "#/components/schemas/PaymentType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/checkout/sessions": {
      "post": {
        "tags": [
          "Session [DEPRECATED]"
        ],
        "summary": "Create a session [DEPRECATED]",
        "description": "[DEPRECATED] Please see \"Payment / Session\" section <br> Creating a payment session generates a session token: <br> A temporary key used to initialize the Payment Widget and authenticate it against your account. <br> This works the same way with Hosted Payment Pages.<br> <br> Payment Widget automatically retrieves all the settings from the payment session to configure the payment methods and the payment experience.<br> <br> Note: sessionId expire after 30 minutes per default.<br>\n",
        "operationId": "sessionCreate_DEPRECATED",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionRequest"
              },
              "examples": {
                "sessionCreateCBExample": {
                  "summary": "Create a session with CB VISA or Mastercard",
                  "value": {
                    "order": {
                      "currency": "EUR",
                      "origin": "E_COM",
                      "country": "FR",
                      "reference": "##AUTO##",
                      "amount": 11100
                    },
                    "payment": {
                      "paymentType": "ONE_OFF",
                      "capture": "AUTOMATIC"
                    },
                    "buyer": {
                      "legalStatus": "PRIVATE",
                      "billingAddress": {
                        "country": "FR"
                      }
                    },
                    "delivery": {
                      "address": {
                        "country": "FR"
                      }
                    },
                    "paymentMethod": {
                      "paymentMethodIDs": [
                        "cb"
                      ]
                    },
                    "pointOfSaleReference": "REF1",
                    "returnURL": "https://yourdomain.com:8080/route/1.0/returns",
                    "notificationURL": "https://yourdomain.com:8080/route/1.0/notifications"
                  }
                },
                "sessionCreateAMEXExample": {
                  "summary": "Create a session with AMEX as payment method",
                  "value": {
                    "order": {
                      "currency": "EUR",
                      "origin": "E_COM",
                      "country": "FR",
                      "reference": "##AUTO##",
                      "amount": 11100
                    },
                    "payment": {
                      "paymentType": "ONE_OFF",
                      "capture": "AUTOMATIC"
                    },
                    "buyer": {
                      "legalStatus": "PRIVATE",
                      "billingAddress": {
                        "country": "FR"
                      }
                    },
                    "delivery": {
                      "address": {
                        "country": "FR"
                      }
                    },
                    "paymentMethod": {
                      "paymentMethodIDs": [
                        "AMEX_1"
                      ]
                    },
                    "pointOfSaleReference": "REF123",
                    "returnURL": "https://yourdomain.com:8080/route/1.0/returns",
                    "notificationURL": "https://yourdomain.com:8080/route/1.0/notifications"
                  }
                },
                "sessionCreateMultiPaymentMethodsExample": {
                  "summary": "Create a session with multiple payment methods",
                  "value": {
                    "order": {
                      "currency": "EUR",
                      "origin": "E_COM",
                      "country": "FR",
                      "reference": "##AUTO##",
                      "amount": 11100
                    },
                    "payment": {
                      "paymentType": "ONE_OFF",
                      "capture": "AUTOMATIC"
                    },
                    "buyer": {
                      "legalStatus": "PRIVATE",
                      "billingAddress": {
                        "country": "FR"
                      }
                    },
                    "delivery": {
                      "address": {
                        "country": "FR"
                      }
                    },
                    "paymentMethod": {
                      "paymentMethodIDs": [
                        "CB_POS123",
                        "AMEX_1"
                      ]
                    },
                    "pointOfSaleReference": "REF123",
                    "returnURL": "https://yourdomain.com:8080/route/1.0/returns",
                    "notificationURL": "https://yourdomain.com:8080/route/1.0/notifications"
                  }
                },
                "sessionCreate3DSExample": {
                  "summary": "Create a session with 3DSecure payment methods",
                  "value": {
                    "order": {
                      "currency": "EUR",
                      "origin": "E_COM",
                      "country": "FR",
                      "reference": "##AUTO##",
                      "amount": 11100
                    },
                    "payment": {
                      "paymentType": "ONE_OFF",
                      "capture": "AUTOMATIC"
                    },
                    "buyer": {
                      "legalStatus": "PRIVATE",
                      "billingAddress": {
                        "country": "FR"
                      }
                    },
                    "delivery": {
                      "address": {
                        "country": "FR"
                      }
                    },
                    "paymentMethod": {
                      "paymentMethodIDs": [
                        "CB3DSV2"
                      ]
                    },
                    "pointOfSaleReference": "REF1",
                    "returnURL": "https://yourdomain.com:8080/route/1.0/returns",
                    "notificationURL": "https://yourdomain.com:8080/route/1.0/notifications",
                    "threeDS": {
                      "challengeInd": "CHALLENGE_REQUESTED"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/sessions/{sessionId}": {
      "get": {
        "tags": [
          "Session [DEPRECATED]"
        ],
        "summary": "Get a session detail [DEPRECATED]",
        "description": "[DEPRECATED] Please see \"Payment / Session\" section <br> Retrieves all the details associated with the buyer session corresponding to the session ID.\n",
        "operationId": "sessionGet_DEPRECATED",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "Web payment session unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/payments/sessions": {
      "post": {
        "tags": [
          "Payment / Session"
        ],
        "summary": "Create a session",
        "description": "Creating a payment session generates a session token: <br> A temporary key used to initialize the Payment Widget and authenticate it against your account. <br> This works the same way with Hosted Payment Pages.<br> <br> Payment Widget automatically retrieves all the settings from the payment session to configure the payment methods and the payment experience.<br> <br> Note: sessionId expire after 30 minutes per default.<br>\n",
        "operationId": "sessionCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionRequest"
              },
              "examples": {
                "sessionCreateCBExample": {
                  "summary": "Create a session with CB VISA or Mastercard",
                  "value": {
                    "order": {
                      "currency": "EUR",
                      "origin": "E_COM",
                      "country": "FR",
                      "reference": "##AUTO##",
                      "amount": 11100
                    },
                    "payment": {
                      "paymentType": "ONE_OFF",
                      "capture": "AUTOMATIC"
                    },
                    "buyer": {
                      "legalStatus": "PRIVATE",
                      "billingAddress": {
                        "country": "FR"
                      }
                    },
                    "delivery": {
                      "address": {
                        "country": "FR"
                      }
                    },
                    "paymentMethod": {
                      "paymentMethodIDs": [
                        "cb"
                      ]
                    },
                    "pointOfSaleReference": "REF1",
                    "returnURL": "https://yourdomain.com:8080/route/1.0/returns",
                    "notificationURL": "https://yourdomain.com:8080/route/1.0/notifications"
                  }
                },
                "sessionCreateAMEXExample": {
                  "summary": "Create a session with AMEX as payment method",
                  "value": {
                    "order": {
                      "currency": "EUR",
                      "origin": "E_COM",
                      "country": "FR",
                      "reference": "##AUTO##",
                      "amount": 11100
                    },
                    "payment": {
                      "paymentType": "ONE_OFF",
                      "capture": "AUTOMATIC"
                    },
                    "buyer": {
                      "legalStatus": "PRIVATE",
                      "billingAddress": {
                        "country": "FR"
                      }
                    },
                    "delivery": {
                      "address": {
                        "country": "FR"
                      }
                    },
                    "paymentMethod": {
                      "paymentMethodIDs": [
                        "AMEX_1"
                      ]
                    },
                    "pointOfSaleReference": "REF123",
                    "returnURL": "https://yourdomain.com:8080/route/1.0/returns",
                    "notificationURL": "https://yourdomain.com:8080/route/1.0/notifications"
                  }
                },
                "sessionCreateMultiPaymentMethodsExample": {
                  "summary": "Create a session with multiple payment methods",
                  "value": {
                    "order": {
                      "currency": "EUR",
                      "origin": "E_COM",
                      "country": "FR",
                      "reference": "##AUTO##",
                      "amount": 11100
                    },
                    "payment": {
                      "paymentType": "ONE_OFF",
                      "capture": "AUTOMATIC"
                    },
                    "buyer": {
                      "legalStatus": "PRIVATE",
                      "billingAddress": {
                        "country": "FR"
                      }
                    },
                    "delivery": {
                      "address": {
                        "country": "FR"
                      }
                    },
                    "paymentMethod": {
                      "paymentMethodIDs": [
                        "CB_POS123",
                        "AMEX_1"
                      ]
                    },
                    "pointOfSaleReference": "REF123",
                    "returnURL": "https://yourdomain.com:8080/route/1.0/returns",
                    "notificationURL": "https://yourdomain.com:8080/route/1.0/notifications"
                  }
                },
                "sessionCreate3DSExample": {
                  "summary": "Create a session with 3DSecure payment methods",
                  "value": {
                    "order": {
                      "currency": "EUR",
                      "origin": "E_COM",
                      "country": "FR",
                      "reference": "##AUTO##",
                      "amount": 11100
                    },
                    "payment": {
                      "paymentType": "ONE_OFF",
                      "capture": "AUTOMATIC"
                    },
                    "buyer": {
                      "legalStatus": "PRIVATE",
                      "billingAddress": {
                        "country": "FR"
                      }
                    },
                    "delivery": {
                      "address": {
                        "country": "FR"
                      }
                    },
                    "paymentMethod": {
                      "paymentMethodIDs": [
                        "CB3DSV2"
                      ]
                    },
                    "pointOfSaleReference": "REF1",
                    "returnURL": "https://yourdomain.com:8080/route/1.0/returns",
                    "notificationURL": "https://yourdomain.com:8080/route/1.0/notifications",
                    "threeDS": {
                      "challengeInd": "CHALLENGE_REQUESTED"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/payments/sessions/{sessionId}": {
      "get": {
        "tags": [
          "Payment / Session"
        ],
        "summary": "Get a session detail",
        "description": "Retrieves all the details associated with the buyer session corresponding to the session ID.\n",
        "operationId": "sessionGet",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "Web payment session unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/payments": {
      "post": {
        "tags": [
          "Payment"
        ],
        "summary": "Create a payment",
        "description": "Performs a debit authorization request to authorization server of your acquirer. Simple authorization and/or immediate payment with a MXWallet",
        "operationId": "paymentCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              },
              "examples": {
                "paymentCreateCardManualEntry": {
                  "summary": "Create a direct payment with a card",
                  "value": {
                    "order": {
                      "currency": "EUR",
                      "origin": "E_COM",
                      "country": "FR",
                      "reference": "##AUTO##",
                      "amount": 2800
                    },
                    "payment": {
                      "paymentType": "ONE_OFF",
                      "capture": "AUTOMATIC"
                    },
                    "paymentInstrument": {
                      "selectedPaymentInstrument": "CardManualEntry",
                      "holderName": "JOHN DOE",
                      "expirationDate": "1233",
                      "number": "4970111111111111",
                      "cvx": "123",
                      "selectedNetwork": "VISA"
                    },
                    "buyer": {
                      "legalStatus": "PRIVATE",
                      "billingAddress": {
                        "country": "FR"
                      }
                    },
                    "delivery": {
                      "address": {
                        "country": "FR"
                      }
                    },
                    "paymentMethodId": "cb"
                  }
                },
                "paymentCreateMxWallet": {
                  "summary": "Create a direct payment with a MXWallet",
                  "value": {
                    "order": {
                      "currency": "EUR",
                      "origin": "E_COM",
                      "country": "FR",
                      "reference": "##AUTO##",
                      "amount": 12300
                    },
                    "payment": {
                      "paymentType": "ONE_OFF",
                      "capture": "AUTOMATIC"
                    },
                    "paymentInstrument": {
                      "selectedPaymentInstrument": "MXWallet",
                      "id": "WALLET123"
                    },
                    "buyer": {
                      "legalStatus": "PRIVATE",
                      "billingAddress": {
                        "country": "FR"
                      }
                    },
                    "delivery": {
                      "address": {
                        "country": "FR"
                      }
                    },
                    "paymentMethodId": "cb"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict: duplicated payment transaction",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/merchants/{merchantId}/mxwallets": {
      "post": {
        "tags": [
          "MXWallet"
        ],
        "summary": "Create a MXWallet",
        "description": "Create a MXWallet.",
        "operationId": "mxWalletCreate",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MXWalletCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "MXWallet created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MXWalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/merchants/{merchantId}/mxwallets/{mxWalletId}": {
      "put": {
        "tags": [
          "MXWallet"
        ],
        "summary": "Update a MXWallet",
        "description": "Update a MXWallet.",
        "operationId": "mxWalletUpdate",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mxWalletId",
            "in": "path",
            "description": "MXWallet identifier (unique by Merchant)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MXWalletId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MXWalletRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MXWallet updated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MXWalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "MXWallet"
        ],
        "summary": "Get a MXWallet detail",
        "description": "Get a MXWallet detail.",
        "operationId": "mxWalletGet",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mxWalletId",
            "in": "path",
            "description": "MXWallet identifier (unique by Merchant)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MXWalletId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MXWalletResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/merchants/{merchantId}/mxwallets/{mxWalletId}/status": {
      "put": {
        "tags": [
          "MXWallet"
        ],
        "summary": "Update a MXWallet Status",
        "description": "Update MXWallet status (ACTIVE or INACTIVE) : All payment instruments in a MXWallet are enabled or disabled.<br> if MXWallet status is INACTIVE, it's no longer possible to pay with this MXWallet.",
        "operationId": "mxWalletUpdateStatus",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mxWalletId",
            "in": "path",
            "description": "MXWallet identifier (unique by Merchant)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MXWalletId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MXWallet status updated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/StatusUpdateResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/merchants/{merchantId}/mxwallets/{mxWalletId}/paymentinstruments": {
      "post": {
        "tags": [
          "MXWallet / Payment Instrument"
        ],
        "summary": "Add a payment instrument",
        "description": "Add a payment instrument to an existing MXWallet.",
        "operationId": "mxWalletPaymentInstrumentAdd",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 12345678901234
          },
          {
            "name": "mxWalletId",
            "in": "path",
            "description": "MXWallet identifier (unique by Merchant)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MXWalletId"
            },
            "example": "WALLET123"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentInstrumentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment instrument added to the MXWallet.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/merchants/{merchantId}/mxwallets/{mxWalletId}/paymentinstruments/{paymentInstrumentRank}": {
      "put": {
        "tags": [
          "MXWallet / Payment Instrument"
        ],
        "summary": "Update a payment instrument",
        "description": "Update (replace) a payment instrument present in a MXWallet.",
        "operationId": "mxWalletPaymentInstrumentUpdate",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mxWalletId",
            "in": "path",
            "description": "MXWallet identifier (unique by Merchant)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MXWalletId"
            }
          },
          {
            "name": "paymentInstrumentRank",
            "in": "path",
            "description": "Rank of the payment instrument to be updated in this MXWallet.",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentInstrumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated payment instrument in the MXWallet.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "MXWallet / Payment Instrument"
        ],
        "summary": "Get a payment instrument detail",
        "description": "Get a payment instrument detail present in a MXWallet.",
        "operationId": "mxWalletPaymentInstrumentGet",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mxWalletId",
            "in": "path",
            "description": "MXWallet identifier (unique by Merchant)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MXWalletId"
            }
          },
          {
            "name": "paymentInstrumentRank",
            "in": "path",
            "description": "Rank of the payment instrument to be updated in this MXWallet.",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/merchants/{merchantId}/mxwallets/{mxWalletId}/paymentinstruments/{paymentInstrumentRank}/status": {
      "put": {
        "tags": [
          "MXWallet / Payment Instrument"
        ],
        "summary": "Update a payment instrument Status",
        "description": "Update the status of a payment instrument present in a MXWallet<br> If this payment instrument is INACTIVE, it is no longer possible to pay with this payment instrument.",
        "operationId": "mxWalletPaymentInstrumentUpdateStatus",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mxWalletId",
            "in": "path",
            "description": "MXWallet identifier (unique by Merchant)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MXWalletId"
            }
          },
          {
            "name": "paymentInstrumentRank",
            "in": "path",
            "description": "Rank of the payment instrument to be disabled in this MXWallet.",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The paymentInstrument status is updated.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/StatusUpdateResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/merchants/{merchantId}/mxwallets/{mxWalletId}/paymentinstruments/{paymentInstrumentRank}/default": {
      "put": {
        "tags": [
          "MXWallet / Payment Instrument"
        ],
        "summary": "Set a payment instrument as default",
        "description": "Set a specific payment instrument as the default in a MXWallet. <br> When a payment instrument is marked as default, all other payment instruments in the MXWallet are automatically deselected as the default. <br> Use this operation to manage the preferred payment instrument in a MXWallet.",
        "operationId": "mxWalletPaymentInstrumentDefault",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mxWalletId",
            "in": "path",
            "description": "MXWallet identifier (unique by Merchant)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MXWalletId"
            }
          },
          {
            "name": "paymentInstrumentRank",
            "in": "path",
            "description": "Rank of the payment instrument to be disabled in this MXWallet.",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The paymentInstrument set as default.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInstrumentResult",
                  "example": {
                    "result": {
                      "title": "ACCEPTED",
                      "code": "00000",
                      "detail": "Successful"
                    },
                    "paymentInstrument": {
                      "rank": 2,
                      "PaymentInstrumentType": {
                        "code": "AMEX",
                        "name": "American Express"
                      },
                      "isDefault": true,
                      "status": "ACTIVE",
                      "state": "STORED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/mxwallets/sessions": {
      "post": {
        "tags": [
          "MXWallet / Session"
        ],
        "summary": "Create a MXWallet session",
        "description": "Create an MXWallet session to initiate the creation of a virtual wallet via the web interface. <br> This feature enables management of wallet cards, allowing your client to:<br> - View registered cards in their wallet<br> - Delete a registered card from their wallet<br> - Add multiple cards to their wallet<br> - Set a card from their wallet as the default payment method.<br>\n",
        "operationId": "mxWalletSessionCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MXWalletSessionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MXWalletSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/mxwallets/sessions/{mxWalletSessionId}": {
      "get": {
        "tags": [
          "MXWallet / Session"
        ],
        "summary": "Get a MXWallet session detail",
        "description": "This service allows you to retrieve all information about a previously initiated wallet session.<br> After creating a wallet session, you must call this service to ensure the proper functioning of the session and to obtain session information.\n",
        "operationId": "mxWalletSessionGet",
        "parameters": [
          {
            "name": "mxWalletSessionId",
            "in": "path",
            "description": "The unique MXWallet session identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MXWalletSessionDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/paybylink/paymentlinks": {
      "post": {
        "tags": [
          "PayByLink"
        ],
        "summary": "Create a paymentLink",
        "description": "Creating a payment link provides means to redirect to a payment interface based on the information provided. <br> This link will remain usable until a successful payment has been completed, the expiration date has passed, or a certain number of payment attempts have been reached. <br> You can set an expiration date up to 70 days from the current date.",
        "operationId": "paymentLinkCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/paymentLinkCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentLinkCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/paybylink/paymentlinks/{paymentLinkId}": {
      "get": {
        "tags": [
          "PayByLink"
        ],
        "summary": "Get a paymentLink",
        "description": "Retrieving the status of a payment link is a service that provides real-time updates on the state of a specific payment link. <br> This service is invoked with a payment link unique identifier, which was initially generated and provided to the user. The status of a payment link can be UNPAID, CANCELLED, BLOCKED, EXPIRED or PAID.",
        "operationId": "paymentLinkGet",
        "parameters": [
          {
            "name": "paymentLinkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success: Check result object for detail.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/paybylink/paymentlinks/{paymentLinkId}/status": {
      "put": {
        "tags": [
          "PayByLink"
        ],
        "summary": "Update a paymentLink Status",
        "description": "Update the status of a paymentLink.",
        "operationId": "paymentLinkUpdateStatus",
        "parameters": [
          {
            "name": "paymentLinkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentLinkStatusUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The paymentLink status is updated.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkStatusUpdateResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/transactions/{id}/captures": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Capture a transaction",
        "description": "The capture function of a validated payment is made after the bank has been issued, so the customer has been debited and the merchant has been credited.\n",
        "operationId": "transactionCapture",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transaction unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "title": "TransactionActionRequest"
                  },
                  {
                    "$ref": "#/components/schemas/TransactionActionRequest"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "option": {
                        "type": "string",
                        "description": "STANDARD | LATE_DELIVERY | FINAL <br> LATE_DELIVERY: <br> To be used with an expired authorization. <br> In this case, a new authorization request will automatically be made before the funds are captured. <br> <br> FINAL: To be used when the capture request is the last one and funds remain non captured afterwards. <br> In that case, Monext reverses remaining non-captured funds.",
                        "enum": [
                          "STANDARD",
                          "LATE_DELIVERY",
                          "FINAL"
                        ],
                        "default": "STANDARD",
                        "example": "STANDARD"
                      }
                    }
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionActionResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionActionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/transactions/{id}/refunds": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Refund a transaction",
        "description": "The refund function of a validated payment is made after the bank has been issued, so the customer has been debited and the merchant has been credited.\n",
        "operationId": "transactionRefund",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transaction unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionActionResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionActionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/transactions/{id}/cancels": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "summary": "Cancel a transaction",
        "description": "The function of the cancellation of a transaction is possible only if the transaction has been validated and not banked, so the customer has not been charged to his bank account.<br> The Reset function is used to cancel the sending to your bank of a debit or credit transaction made from the following functions: payment, debit, dredit, refund.\n",
        "operationId": "transactionCancel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transaction unique identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionActionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionActionResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionActionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/transactions/{id}": {
      "get": {
        "tags": [
          "Transaction"
        ],
        "summary": "Get a transaction detail",
        "description": "Retrieves all the details associated with the buyer transaction corresponding to the transaction ID.\n",
        "operationId": "transactionGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Transaction unique identifier",
            "required": true,
            "schema": {
              "type": "string",
              "example": "123456890"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/authentications": {
      "post": {
        "tags": [
          "3DS Authentication"
        ],
        "summary": "Create a 3DS authentication session",
        "description": "This service initiates a 3D Secure (3DS) authentication session with the cardholder's issuing bank (ACS). It is used to validate the cardholder's identity during the checkout process, enhancing transaction security and compliance with authentication requirements.",
        "operationId": "authenticationCreate",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/authentications/{sessionId}": {
      "put": {
        "tags": [
          "3DS Authentication"
        ],
        "summary": "Continue a 3DS authentication session",
        "description": "This service continue an existing 3D Secure (3DS) authentication session with the cardholder's issuing bank (ACS). It is used to validate the cardholder's identity during the checkout process, enhancing transaction security and compliance with authentication requirements.\n",
        "operationId": "authenticationContinue",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "This property represents the 3DS authentication session ID (MD field value). The 3DS authentication session ID provided by the merchant in the request, or generated by Monext if not provided.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "minLength": 0,
              "example": "fa1d1376-0cb1-4310-906f-d1c20f7b6866"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationContinueRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Authentication session Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    },
    "/v1/checkout/authentications/{sessionId}/verify": {
      "post": {
        "tags": [
          "3DS Authentication"
        ],
        "summary": "Verify a 3DS authentication session",
        "description": "This service verify a 3D Secure (3DS) authentication session with the cardholder's issuing bank (ACS). It is used to validate the cardholder's identity during the checkout process, enhancing transaction security and compliance with authentication requirements.",
        "operationId": "authenticationVerify",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "This property represents the 3DS authentication session ID (MD field value). The 3DS authentication session ID provided by the merchant in the request, or generated by Monext if not provided.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "minLength": 0,
              "example": "fa1d1376-0cb1-4310-906f-d1c20f7b6866"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Authentication session Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationVerifyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "502": {
            "description": "Bad Gateway ou Proxy Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Time-out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "links": {},
    "callbacks": {},
    "schemas": {
      "Result": {
        "title": "Result",
        "description": "Result",
        "required": [
          "title",
          "code",
          "detail"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "ACCEPTED, ERROR, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
            "example": "ERROR"
          },
          "code": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
            "example": "02305"
          },
          "detail": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "example": "Invalid field format, please refer to the user guide"
          }
        }
      },
      "SuccessfulResult": {
        "title": "SuccessfulResult",
        "description": "Successful result",
        "allOf": [
          {
            "$ref": "#/components/schemas/Result"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "description": "Result object in case of success or warning. ACCEPTED, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                "example": "ACCEPTED"
              },
              "code": {
                "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                "example": "00000"
              },
              "detail": {
                "example": "Sucessful"
              }
            }
          }
        ]
      },
      "BadRequestResult": {
        "title": "BadRequestResult",
        "description": "BadRequest result",
        "allOf": [
          {
            "$ref": "#/components/schemas/Result"
          },
          {
            "type": "object",
            "properties": {
              "invalidParams": {
                "description": "List of invalid fields and the appropriate format",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvalidParams"
                }
              }
            }
          }
        ]
      },
      "InvalidParams": {
        "title": "InvalidParams",
        "type": "object",
        "description": "List of invalid fields and the appropriate format",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "invalid field name"
          },
          "reason": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "expected format for the field",
            "example": "size must be between 3 and 4"
          },
          "codes": {
            "maxItems": 255,
            "minItems": 0,
            "type": "array",
            "description": "Translation error key",
            "example": "{form.group.error}",
            "items": {
              "type": "string",
              "description": "Translation error key",
              "example": "{form.group.error}"
            }
          },
          "arguments": {
            "maxItems": 255,
            "minItems": 0,
            "type": "array",
            "description": "Arguments error key",
            "example": 127,
            "items": {
              "type": "string",
              "description": "Arguments error key",
              "example": "127"
            }
          }
        }
      },
      "Order": {
        "title": "Order",
        "type": "object",
        "description": "Order information",
        "required": [
          "reference",
          "amount",
          "currency"
        ],
        "properties": {
          "reference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderReference"
              }
            ],
            "maxLength": 50,
            "minLength": 0,
            "pattern": "[^//]*",
            "type": "string",
            "description": "Merchant order reference.<br> Unique order reference defined by the merchant. This reference is used in our duplicate detection system.",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount",
                "description": "Total amount due by the buyer.<br> It includes  taxes, discount and delivery fees.<br> The amount is expressed in the smallest currency unit.<br> For example, 1€ value must be 100.<br> Shall be set to 0 for an account verification query."
              }
            ]
          },
          "taxes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount",
                "description": "Total amount of taxes including taxes related to delivery fees. <br> The amount is expressed in the smallest currency unit. <br>"
              }
            ]
          },
          "discount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount",
                "description": "Discount amount.<br> The amount is expressed in the smallest currency unit. <br>"
              }
            ]
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Currency"
              }
            ]
          },
          "date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date",
                "description": "Date and time<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ <br> Default value : current date time"
              }
            ]
          },
          "origin": {
            "type": "string",
            "description": "Specify the origin of the order. <br> It may come from an e-commerce website, a mail order, a telephon order or a store.<br> Default value: E_COM",
            "enum": [
              "E_COM",
              "TO",
              "MO"
            ],
            "default": "E_COM",
            "example": "E_COM"
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Country",
                "description": "Code of the country where the order takes place.<br> See [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)"
              }
            ]
          },
          "items": {
            "description": "List of items grouped by category.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "description": "Item in a order",
        "properties": {
          "reference": {
            "type": "string",
            "description": "Order item reference.",
            "maxLength": 50,
            "minLength": 0,
            "example": "ref-1"
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount",
                "description": "Total price of these items, in the smallest currency unit."
              }
            ]
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of Items: nb, weight, volume, in the smallest currency unit.",
            "minimum": 1,
            "example": 10
          },
          "comment": {
            "type": "string",
            "description": "Comment of the item in the order.",
            "maxLength": 255,
            "minLength": 0,
            "example": "Lorem impusum color damet"
          },
          "brand": {
            "type": "string",
            "description": "Product brand.",
            "maxLength": 50,
            "minLength": 0,
            "example": "MONEXT"
          },
          "category": {
            "type": "string",
            "description": "Category of item. <br> Values : [category values](https://docs.monext.fr/display/DT/Codes+-+Category)",
            "maxLength": 50,
            "minLength": 0,
            "example": "100010001"
          },
          "subCategory1": {
            "type": "string",
            "description": "Rank 1 subcategory.",
            "maxLength": 50,
            "minLength": 0,
            "example": "Watches & Jewellery"
          },
          "subCategory2": {
            "type": "string",
            "description": "Rank 2 subcategory.",
            "maxLength": 50,
            "minLength": 0,
            "example": "Men watches"
          },
          "miscellaneous": {
            "$ref": "#/components/schemas/Miscellaneous"
          },
          "taxRate": {
            "type": "integer",
            "description": "Item tax rate (expressed in hundredths). Format : 1580 for 15.8%.",
            "maximum": 9999,
            "example": 1580
          },
          "seller": {
            "type": "string",
            "description": "Name or id of the final seller.",
            "maxLength": 100,
            "minLength": 0,
            "example": "MONEXT"
          },
          "sellerType": {
            "type": "string",
            "description": "Type of seller.  Values : PROFESSIONAL, PRIVATE_SELLER",
            "enum": [
              "PROFESSIONAL",
              "PRIVATE_SELLER"
            ]
          }
        }
      },
      "Payment": {
        "title": "Payment",
        "type": "object",
        "description": "Payment object gathers information about the desired payment:<br> The payment type, the payment capture mode, as well as the desired payment amount and the capture date in case of deferred payment.",
        "required": [
          "paymentType",
          "capture"
        ],
        "properties": {
          "paymentType": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "capture": {
            "$ref": "#/components/schemas/Capture"
          },
          "deferredCaptureDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date",
                "description": "Significant if capture='DEFERRED' »<br> Date at which Monext is expected to capture the payment.<br> It must be earlier than today + 7 days.<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ"
              }
            ]
          },
          "softDescriptor": {
            "$ref": "#/components/schemas/SoftDescriptor"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount",
                "description": "Transaction amount.<br> By default, Monext uses the value given in order.amount. <br> Amount in the smallest currency unit. <br> The value 100 corresponds to 1 €."
              }
            ]
          },
          "recurring": {
            "$ref": "#/components/schemas/RecurringPayment"
          }
        }
      },
      "PaymentInstrumentType": {
        "title": "PaymentInstrumentType",
        "type": "object",
        "description": "Type of the payment instrument",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Monext instrument type code <br> To defined the payment instrument type : CB, PAYLPAL, AMEX, BANCONTACT, IDEAL ....",
            "example": "AMEX"
          },
          "name": {
            "type": "string",
            "description": "Commercial name of the payment instrument <br> Not yet implemented.",
            "example": "American Express"
          }
        }
      },
      "PaymentMethod": {
        "title": "PaymentMethod",
        "type": "object",
        "required": [
          "paymentMethodIDs"
        ],
        "description": "The suggested payment method.",
        "properties": {
          "paymentMethodIDs": {
            "type": "array",
            "description": "The list of payment methods you wish to use for this payment. <br> Monext Online displays the list of payment methods according to the list order. <br> If empty, all payment methods of the point of sale will be displayed.",
            "items": {
              "type": "string",
              "description": "List of payment methods proposed to the buyer.<br> if empty, all active payment methods will be used."
            }
          },
          "fallbackPaymentMethodIDs": {
            "type": "array",
            "description": "A list of fallback payment methods to use if the primary payment methods fail. <br> Monext Online will attempt these methods in the order provided if the primary methods are unsuccessful. <br> If empty, no fallback payment methods will be used.",
            "items": {
              "type": "string",
              "description": "List of fallback payment methods proposed to the buyer.<br> If empty, no fallback payment methods will be considered."
            }
          },
          "smartDisplayIndicator": {
            "type": "boolean",
            "description": "If Smart Display rules are configured:<br>\n - When smartDisplayIndicator is set to \"true\", the rules are applied.<br>\n - When smartDisplayIndicator is set to \"false\", the Smart Display is disabled, and the rules are not applied.<br>\nThe Smart Display is active by default (smartDisplayIndicator=true).",
            "example": true
          }
        }
      },
      "Person": {
        "title": "Person",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title, <br> See [title codes](https://docs.payline.com/display/DT/Codes+-+Title).",
            "maxLength": 20,
            "minLength": 0,
            "example": "MR",
            "enum": [
              "MRS",
              "MR"
            ]
          },
          "firstName": {
            "type": "string",
            "description": "Firstname",
            "maxLength": 100,
            "minLength": 0,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Lastname",
            "maxLength": 100,
            "minLength": 0,
            "example": "Doe"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "mobile": {
            "type": "string",
            "description": "Mobile phone number.",
            "maxLength": 15,
            "example": "+33123456789"
          }
        }
      },
      "PersonEx": {
        "title": "Person",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Person"
          },
          {
            "type": "object",
            "properties": {
              "legalDocument": {
                "type": "object",
                "description": "Buyer's identification document.",
                "$ref": "#/components/schemas/LegalDocument"
              },
              "birthDate": {
                "type": "string",
                "format": "date",
                "description": "Buyer's birthdate.<br> Format: yyyy-MM-dd",
                "example": "1995-03-27"
              }
            }
          }
        ]
      },
      "LegalDocument": {
        "title": "LegalDocument",
        "type": "object",
        "description": "Represents a category of various legal documents such as : identification cards, driver's licenses, etc. <br> It serves as a generalized container for handling different types of official documents that may be associated with a person.",
        "required": [
          "code"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Specifies the type or category of the legal document.<br> Not implemented yet. Please don't use.",
            "enum": [
              "ID_CARD",
              "DRIVER_LICENSE",
              "PASSPORT",
              "RESIDENCE_PERMIT",
              "OTHER"
            ],
            "example": "ID_CARD"
          },
          "number": {
            "type": "string",
            "description": "The unique identifier or number associated with the legal document.",
            "example": "123456789"
          }
        }
      },
      "Address": {
        "type": "object",
        "description": "Address object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Label for the address.",
            "maxLength": 200,
            "minLength": 0,
            "example": "My home / My work"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street Number",
            "maxLength": 100,
            "minLength": 0,
            "example": "5 ter"
          },
          "street": {
            "type": "string",
            "description": "Street name.",
            "maxLength": 100,
            "minLength": 0,
            "example": "Place du Général de Gaulle"
          },
          "complement": {
            "type": "string",
            "description": "Complement of the address.",
            "maxLength": 100,
            "minLength": 0,
            "example": "La Rotonde"
          },
          "city": {
            "type": "string",
            "description": "City name.",
            "maxLength": 150,
            "minLength": 0,
            "example": "Aix-En-Provence"
          },
          "zip": {
            "type": "string",
            "description": "shipping postal or ZIP code.",
            "maxLength": 12,
            "minLength": 0,
            "example": 13100
          },
          "state": {
            "type": "string",
            "description": "The name of the state, province, or region.",
            "maxLength": 100,
            "minLength": 0,
            "example": "California"
          },
          "county": {
            "type": "string",
            "description": "The name of the county or administrative division.",
            "maxLength": 50,
            "minLength": 0,
            "example": "Los Angeles County"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "addressCreateDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date",
                "description": "Creation date of the address in the merchant's system<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ"
              }
            ]
          }
        }
      },
      "ContactAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Person"
          },
          {
            "$ref": "#/components/schemas/Address"
          },
          {
            "type": "object"
          }
        ]
      },
      "BuyerBase": {
        "type": "object",
        "description": "Buyer Base object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Merchant buyer identifier<br>",
            "maxLength": 50,
            "minLength": 0,
            "example": "124-123-DFS"
          }
        }
      },
      "Buyer": {
        "title": "Buyer",
        "type": "object",
        "description": "Buyer object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BuyerBase"
          },
          {
            "$ref": "#/components/schemas/PersonEx"
          },
          {
            "type": "object"
          },
          {
            "properties": {
              "legalStatus": {
                "type": "string",
                "description": "Legal status of the customer : CORPORATE, PRIVATE\nDefault value: PRIVATE",
                "enum": [
                  "CORPORATE",
                  "PRIVATE"
                ],
                "example": "PRIVATE",
                "default": "PRIVATE"
              },
              "billingAddress": {
                "type": "object",
                "description": "Buyer's Billing address.",
                "$ref": "#/components/schemas/ContactAddress"
              }
            }
          }
        ]
      },
      "BuyerData": {
        "title": "Buyer",
        "type": "object",
        "description": "Buyer object for response",
        "allOf": [
          {
            "$ref": "#/components/schemas/Buyer"
          },
          {
            "type": "object"
          },
          {
            "properties": {
              "accountHistory": {
                "$ref": "#/components/schemas/AccountHistory"
              }
            }
          }
        ]
      },
      "AccountHistory": {
        "type": "object",
        "description": "Detailed account history information for a buyer, encompassing various aspects of their behavior.",
        "properties": {
          "accountCreateDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "Buyer's account creation date. <br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ"
              }
            ]
          },
          "accountAverageAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {
                "description": "The average amount of this buyer's purchases."
              }
            ]
          },
          "accountOrderCount": {
            "type": "integer",
            "description": "The number of orders placed by this buyer",
            "example": 10
          },
          "suspiciousActivity": {
            "type": "string",
            "description": "Indicates whether the merchant has experienced suspicious activity (including previous fraud) on the cardholder account:<br> Values :<br>\n - NO_SUSPICIOUS<br>\n - SUSPICIOUS",
            "maxLength": 20,
            "minLength": 0,
            "enum": [
              "NO_SUSPICIOUS",
              "SUSPICIOUS"
            ],
            "example": "SUSPICIOUS"
          },
          "firstOrderDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "Date of the first order for this buyer."
              }
            ]
          },
          "lastOrderDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "Date of the last order for the buyer (excluding the current order)."
              }
            ]
          },
          "totalAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {
                "description": "Total amount of the orders placed by the buyer."
              }
            ]
          },
          "lastChange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "Date of the last change on the buyer account."
              }
            ]
          },
          "lastPasswordChange": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "Date of the last password change."
              }
            ]
          },
          "provisionAttemptsDay": {
            "type": "integer",
            "description": "Number of Provisioning Attempts Day.<br> Number of Add Card attempts in the last 24 hours.",
            "example": 10
          },
          "paymentAccountAge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date",
                "description": "Date that the payment account was enrolled in the cardholder's account with the merchant."
              }
            ]
          },
          "orderCount6Months": {
            "type": "integer",
            "description": "Number of orders placed by the buyer during the last 6 months.",
            "example": 15
          },
          "orderAmount6Months": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {
                "description": "Total amount of the orders placed by the buyer during the last 6 months."
              }
            ]
          },
          "transactionCountDay": {
            "type": "integer",
            "description": "Number of transactions (successful and abandoned) for this buyer in the previous 24 hours.",
            "example": 20
          },
          "transactionCountYear": {
            "type": "integer",
            "description": "Number of transactions (successful and abandoned) for this buyer in the previous year.",
            "example": 123
          },
          "shipAddressUsage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "Date when the shipping address used for this transaction was first used."
              }
            ]
          }
        }
      },
      "Device": {
        "title": "Device",
        "type": "object",
        "description": "Device object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The \"device\" attribute is used to specify the type of electronic device. This attribute encompasses a variety of devices such as computers, smartphones, televisions, tablets, and other electronic devices.",
            "enum": [
              "UNKNOWN",
              "COMPUTER",
              "MOBILE",
              "TABLET",
              "TV",
              "CONSOLE"
            ]
          },
          "operatingSystem": {
            "type": "string",
            "description": "The \"operatingSystem\" attribute is used to specify the operating system associated with an electronic device. This attribute provides essential information about the software platform used by the device, which can be valuable for management, compatibility, and other software-related considerations.<br> Specific values for this attribute may include operating systems such as Android, Windows, macOS, etc..."
          },
          "fingerprint": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The \"fingerprint\" attribute is used to represent a unique identifier or signature associated with a device.",
            "example": "1234a"
          },
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "browserUserAgent": {
            "$ref": "#/components/schemas/BrowserUserAgent"
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          }
        }
      },
      "Delivery": {
        "type": "object",
        "description": "Delivery object",
        "properties": {
          "charge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {
                "description": "Amount of delivery charges in smallest unit of currency, example 250 for 2.50 euros."
              }
            ]
          },
          "provider": {
            "type": "string",
            "description": "Delivery name company."
          },
          "expectedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "Expected delivery date.<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ"
              }
            ]
          },
          "timeframe": {
            "type": "string",
            "description": "Type of delivery time : ELECTRONIC | SAME_DAY | OVERNIGHT | TWO_DAY_OR_MORE",
            "enum": [
              "ELECTRONIC",
              "SAME_DAY",
              "OVERNIGHT",
              "TWO_DAY_OR_MORE"
            ],
            "example": "SAME_DAY"
          },
          "mode": {
            "type": "string",
            "description": "Specifies the delivery mode for the order. Refer to the documentation for more details: [Delivery Mode Codes](https://docs.monext.fr/display/DT/Codes+-+deliveryMode).",
            "enum": [
              "STORE_PICKUP",
              "PICKUP_POINT",
              "STATION_PICKUP",
              "MAIL_DELIVERY",
              "DIGITAL_GOOD",
              "BILLING_ADDRESS",
              "VERIFIED_ADDRESS",
              "OTHER_ADDRESS",
              "EVENT_TICKET",
              "LOCKER",
              "OTHER"
            ],
            "example": "STORE_PICKUP"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactAddress"
              },
              {
                "description": "Delivery adress."
              }
            ]
          }
        }
      },
      "PartnerReturnedData": {
        "title": "PartnerReturnedData",
        "type": "object",
        "description": "Payment service provider specific result data.<br> Format depends on the payment method which is described in the documentation of this payment method.<br>",
        "properties": {
          "authorizationNumber": {
            "type": "string",
            "description": "Authorization number issued by the acquirer authorization server. This field is filled in if the authorization request is granted.",
            "maxLength": 6,
            "minLength": 0,
            "example": "123456"
          },
          "authorizationDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "Date and time<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ <br> Authorization date issued by the acquirer authorization server. This field is filled in if the authorization request is granted."
              }
            ]
          },
          "issuerTransactionId": {
            "type": "string",
            "description": "Issuer identifier of the card payment.<br> To be used in futher MIT using originalTransactionId.",
            "maxLength": 200,
            "minLength": 0,
            "example": "8906235204"
          },
          "bankAccount": {
            "$ref": "#/components/schemas/BankAccountData"
          },
          "additionalData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": ""
            },
            "description": "Payment service provider specific result data.<br> A dictionary of key-value pairs where the values can only be strings.<br> Format depends on the payment method which is described in the documentation of this payment method.<br> e.g. ``` {\n  \"PAYER_EMAIL\": \"john.do@mail.com\",\n  \"TRANSACTION_START_DATE\": \"2023-12-26T15:48:19Z\"\n} ```",
            "example": {
              "key1": "value1",
              "key2": "value2"
            }
          }
        }
      },
      "Issuer": {
        "title": "Issuer",
        "type": "object",
        "description": "Issuer information.",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Issuer code.",
            "minLength": 0,
            "maxLength": 50,
            "example": "15589"
          },
          "name": {
            "type": "string",
            "description": "Issuer name.",
            "example": "CREDIT MUTUEL ARKEA"
          }
        }
      },
      "Fraud": {
        "title": "Fraud",
        "type": "object",
        "description": "Contains information returned by our fraud prevention module.",
        "properties": {
          "riskDetected": {
            "type": "boolean",
            "description": "Indicates whether fraud risk has been detected. True if detected, otherwise false."
          },
          "action": {
            "type": "string",
            "description": "Action taken in response to fraud detection."
          },
          "code": {
            "type": "string",
            "description": "Code associated with the detected fraud."
          },
          "list": {
            "type": "string",
            "description": "List related to the detected fraud."
          },
          "rule": {
            "type": "string",
            "description": "Rule applied in the fraud detection process."
          },
          "explanation": {
            "type": "string",
            "description": "Explanation or details about the detected fraud."
          }
        }
      },
      "SessionRequest": {
        "description": "Request object to create a web payment session.",
        "type": "object",
        "required": [
          "pointOfSaleReference",
          "order",
          "returnURL"
        ],
        "properties": {
          "pointOfSaleReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointOfSaleReference"
              },
              {
                "description": "Point of sale reference identifier."
              }
            ]
          },
          "paymentMethod": {
            "description": "The suggested payment method.",
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "order": {
            "description": "Order information.",
            "$ref": "#/components/schemas/Order"
          },
          "payment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment"
              },
              {
                "type": "object"
              },
              {
                "description": "Payment information."
              },
              {
                "required": [
                  "paymentType",
                  "capture"
                ]
              }
            ]
          },
          "buyer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Buyer"
              },
              {
                "description": "Buyer information."
              }
            ]
          },
          "delivery": {
            "$ref": "#/components/schemas/Delivery"
          },
          "threeDS": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ThreeDSInfo"
              },
              {
                "description": "3DS information"
              }
            ]
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          },
          "miscData": {
            "$ref": "#/components/schemas/MiscData"
          },
          "returnURL": {
            "type": "string",
            "description": "URL on which the buyer's browser is redirected in case of acceptance or refusal of payment on Monext Online.<br> The merchant must call getWebPaymentDetails or GET /sessions.",
            "example": "https://yourdomain.com:8080/route/1.0/returns"
          },
          "notificationURL": {
            "type": "string",
            "description": "URL on which Monext Online will ask the merchant site to retrieve the result of the transaction.",
            "example": "https://yourdomain.com:8080/route/1.0/notifications"
          },
          "languageCode": {
            "type": "string",
            "description": "Buyer browser language by default. Example : FR",
            "example": "FR"
          },
          "customPaymentPageCode": {
            "type": "string",
            "description": "The identifier of customized template pages.<br> If not set, the default one will be used.<br>",
            "example": "vRsaSg2x3HsUC5cQzwlv"
          },
          "oneClickOption": {
            "type": "string",
            "description": "Defines whether the CVV is required during a 1-click payment. <br> Possible values: WITH_CVV, WITHOUT_CVV. <br> By default, or if the field is left empty, the CVV will not be requested.",
            "enum": [
              "WITH_CVV",
              "WITHOUT_CVV"
            ],
            "default": "WITHOUT_CVV",
            "example": "WITHOUT_CVV"
          },
          "mxWalletId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MXWalletId"
              },
              {
                "description": "The unique identifier of Monext virtual wallet.<br> You must provide Monext with an unique identifier that corresponds to one and only one buyer on your information system.<br> This identifier will be used when you request a payment by Monext virtual wallet.<br> MXWallet ID must:<br>\n  - Start and contain only an alphanumeric characters (A-Z, a-z, 0-9).<br>\n  - May include dots ('.'), hyphens ('-'), and underscores ('_').<br>\n  - Have a length between 1 and 50 characters."
              }
            ]
          }
        }
      },
      "SessionResponse": {
        "description": "Response object from a web payment session.",
        "type": "object",
        "required": [
          "result",
          "sessionId"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "title": "SuccessfulResult",
                "description": "Successful result",
                "allOf": [
                  {
                    "title": "Result",
                    "description": "Result",
                    "required": [
                      "title",
                      "code",
                      "detail"
                    ],
                    "type": "object",
                    "properties": {
                      "title": {
                        "maxLength": 50,
                        "minLength": 0,
                        "type": "string",
                        "description": "ACCEPTED, ERROR, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "ERROR"
                      },
                      "code": {
                        "maxLength": 5,
                        "minLength": 0,
                        "type": "string",
                        "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "02305"
                      },
                      "detail": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string",
                        "description": "A human-readable explanation specific to this occurrence of the problem.",
                        "example": "Invalid field format, please refer to the user guide"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "title": {
                        "description": "Result object in case of success or warning. ACCEPTED, REFUSED, CANCELLED, INPROGRESS, ONHOLD_PARTNER, PENDING_RISK.<br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "ACCEPTED"
                      },
                      "code": {
                        "description": "Return code : more information. <br> See [result code list](https://docs.monext.fr/display/DT/Return+codes)",
                        "example": "00000"
                      },
                      "detail": {
                        "example": "Sucessful"
                      }
                    }
                  }
                ]
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "sessionId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Payment session unique identifier.",
            "example": "13fChMDzWfyVw6d2R2391553893852225"
          },
          "redirectURL": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "description": "URL to redirect the buyer to do the payment.<br> Only for not widget integration.",
            "example": "https://homologation-webpayment.payline.com/v2/?token=1KboRUMDkVHpHcsIpNUz1553947237037"
          }
        }
      },
      "SessionDetailResponse": {
        "title": "SessionDetailResponse",
        "description": "The response object returned by the \"Get a session detail\" service.",
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "transactions": {
            "title": "Transactions",
            "description": "List of transactions (one or more).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPayment"
            }
          },
          "order": {
            "description": "Order information.",
            "$ref": "#/components/schemas/Order"
          },
          "buyer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BuyerData"
              },
              {
                "description": "Buyer information."
              }
            ]
          },
          "delivery": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delivery"
              },
              {
                "description": "Delivery information."
              }
            ]
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "paymentPlan": {
            "$ref": "#/components/schemas/PaymentPlan"
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          }
        }
      },
      "paymentLinkCreateRequest": {
        "title": "paymentLinkCreateRequest",
        "allOf": [
          {
            "$ref": "#/components/schemas/SessionRequest"
          },
          {
            "type": "object",
            "description": "Request object used to create a payment link.",
            "properties": {
              "expirationDate": {
                "type": "string",
                "format": "date",
                "description": "Payment link's expiration date<br> Format: yyyy-MM-dd",
                "example": "2024-12-31"
              }
            }
          }
        ]
      },
      "paymentLinkCreateResponse": {
        "title": "paymentLinkResponse",
        "type": "object",
        "description": "PaymentLink object response.",
        "required": [
          "result",
          "paymentLink"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "paymentLink": {
            "$ref": "#/components/schemas/PaymentLinkBase"
          }
        }
      },
      "paymentLinkResponse": {
        "title": "paymentLinkResponse",
        "type": "object",
        "description": "PaymentLink object response.",
        "required": [
          "result",
          "paymentLink"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "paymentLink": {
            "$ref": "#/components/schemas/PaymentLink"
          },
          "transactions": {
            "title": "Transactions",
            "description": "List of transactions (one or more).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionPayment"
            }
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "buyer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Buyer"
              },
              {
                "description": "Buyer information."
              }
            ]
          },
          "delivery": {
            "$ref": "#/components/schemas/Delivery"
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          }
        }
      },
      "PaymentLinkBase": {
        "title": "PaymentLink",
        "description": "Response object from a PaymentLink.",
        "type": "object",
        "required": [
          "id",
          "status",
          "link",
          "expirationDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment link Id.",
            "minLength": 5,
            "maxLength": 200,
            "example": "146f72c438341796ae08c1821718207002329"
          },
          "link": {
            "type": "string",
            "description": "Current payment link.",
            "example": "https://payment.payline.com/payByLinkHook?token=esrqhlgzerjlizgiljzge",
            "maxLength": 200,
            "minLength": 20
          },
          "status": {
            "$ref": "#/components/schemas/PaymentLinkStatus"
          },
          "pointOfSaleReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointOfSaleReference"
              },
              {
                "description": "Point of sale reference."
              }
            ],
            "example": "REF_123"
          },
          "pointOfSaleLabel": {
            "type": "string",
            "description": "Point of sale label.",
            "example": "My Point Of Sale",
            "maxLength": 50,
            "minLength": 1
          },
          "merchantId": {
            "type": "number",
            "description": "Merchant ID.",
            "example": 123456789,
            "maxLength": 50,
            "minLength": 1
          },
          "expirationDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date"
              },
              {
                "description": "Expiration date of the payment link.<br> Date and time<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ"
              }
            ]
          },
          "createDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date",
                "description": "Creation date of the payment link.<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ"
              }
            ]
          }
        }
      },
      "PaymentLink": {
        "title": "PaymentLink",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentLinkBase"
          },
          {
            "type": "object"
          }
        ]
      },
      "PaymentLinkStatus": {
        "title": "PaymentLinkStatus",
        "type": "string",
        "description": "Payment link's status.",
        "enum": [
          "UNPAID",
          "CANCELLED",
          "BLOCKED",
          "EXPIRED",
          "PAID"
        ],
        "example": "PAID"
      },
      "PaymentLinkStatusUpdateRequest": {
        "title": "PaymentLinkStatusUpdateRequest",
        "type": "object",
        "description": "Update a Payment link status request",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PaymentLinkStatus"
          }
        }
      },
      "PaymentLinkStatusUpdateResult": {
        "title": "PaymentLinkStatusUpdateResult",
        "type": "object",
        "description": "Update a Payment link status response",
        "required": [
          "status"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/PaymentLinkStatus"
          }
        }
      },
      "PaymentRequest": {
        "title": "PaymentRequest",
        "description": "Request object to create a payment",
        "type": "object",
        "required": [
          "paymentMethodId",
          "order",
          "paymentInstrument"
        ],
        "properties": {
          "paymentMethodId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodId"
              },
              {
                "description": "Specifies which of the payment methods (acquiring contracts or PSP contracts) shall be used for the payment."
              },
              {
                "example": "CB01"
              }
            ]
          },
          "order": {
            "description": "Order information",
            "$ref": "#/components/schemas/Order"
          },
          "payment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment"
              },
              {
                "type": "object"
              },
              {
                "description": "Payment information",
                "required": [
                  "paymentType",
                  "capture"
                ]
              }
            ]
          },
          "originalTransactionId": {
            "type": "string",
            "description": "For Merchant Initiated Transaction only.<br> Shall be set to the the transaction identifier returned by the issuer in the original transaction initiated by the customer (returned by Monext in the partnerReturnedData/issuerTransactionId parameter)."
          },
          "paymentInstrument": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentInstrument"
              },
              {
                "description": "Payment Instrument information."
              }
            ]
          },
          "buyer": {
            "title": "Buyer",
            "allOf": [
              {
                "$ref": "#/components/schemas/BuyerData"
              },
              {
                "description": "Buyer information."
              }
            ]
          },
          "delivery": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delivery"
              },
              {
                "description": "Delivery information."
              }
            ]
          },
          "device": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Device"
              },
              {
                "description": "Device information."
              }
            ]
          },
          "authentication3DSecure": {
            "$ref": "#/components/schemas/Authentication3DSecure"
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          }
        }
      },
      "PaymentResponse": {
        "description": "The response object returned by the CreatePayment service.",
        "type": "object",
        "required": [
          "result",
          "transaction"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "isDuplicated": {
            "type": "boolean",
            "description": "This indicator is returned by Monext Online in case of transaction duplicated.<br> <br> true = duplicate transaction <br> false = no duplicate detected",
            "default": false,
            "example": true
          },
          "transaction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionPayment"
              },
              {
                "description": "Details of the payment transaction."
              }
            ]
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              },
              {
                "description": "Order information."
              }
            ]
          },
          "buyer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BuyerData"
              },
              {
                "description": "Buyer information."
              }
            ]
          },
          "delivery": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delivery"
              },
              {
                "description": "Delivery information."
              }
            ]
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "authentication3DSecure": {
            "$ref": "#/components/schemas/Authentication3DSecure"
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          }
        }
      },
      "MXWalletRequest": {
        "title": "MXWalletRequest",
        "description": "The request object used to update a MXWallet without impact its payment instruments.",
        "type": "object",
        "properties": {
          "holder": {
            "description": "The holder of the MXWallet.",
            "$ref": "#/components/schemas/Person"
          },
          "comment": {
            "type": "string",
            "description": "Comment about this MXWallet.",
            "example": "a comment about this MXWallet"
          }
        }
      },
      "MXWalletCreateRequest": {
        "title": "MXWalletCreateRequest",
        "type": "object",
        "required": [
          "mxWalletId",
          "paymentInstrumentOrigin"
        ],
        "properties": {
          "mxWalletId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MXWalletId"
              },
              {
                "description": "MXWallet unique identifier. <br> You must provide Monext Online with an unique identifier that corresponds to one and only one buyer on your information system. <br> This identifier will be used when you request a payment by virtual wallet. <br> MXWallet ID must:<br>\n  - Start and contain only an alphanumeric characters (A-Z, a-z, 0-9).<br>\n  - May include dots ('.'), hyphens ('-'), and underscores ('_').<br>\n  - Have a length between 1 and 50 characters."
              }
            ]
          },
          "paymentInstrumentOrigin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentInstrumentOrigin"
              },
              {
                "type": "object"
              },
              {
                "description": "Refers to the origin of a payment instrument to add it in the new MXWallet."
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/MXWalletRequest"
          }
        ]
      },
      "MXWalletResponse": {
        "description": "The MXWallet response.",
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "mxWallet": {
            "$ref": "#/components/schemas/MXWalletDetail"
          }
        }
      },
      "MXWalletSessionRequest": {
        "title": "MXWalletSessionRequest",
        "description": "Request object to create a MXWallet session.",
        "type": "object",
        "required": [
          "pointOfSaleReference",
          "paymentMethodIDs",
          "mxWalletId",
          "returnURL"
        ],
        "properties": {
          "pointOfSaleReference": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PointOfSaleReference"
              },
              {
                "description": "Point of sale reference."
              }
            ],
            "example": "REF_123"
          },
          "paymentMethodIDs": {
            "type": "array",
            "description": "The list of payment methods you wish to use for the wallet session.",
            "items": {
              "type": "string",
              "description": "List of payment methods proposed."
            }
          },
          "mxWalletId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MXWalletId"
              },
              {
                "description": "The unique identifier of Monext virtual wallet.<br> You must provide Monext with an unique identifier that corresponds to one and only one buyer on your information system.<br> This identifier will be used when you request a payment by Monext virtual wallet.<br> MXWallet ID must:<br>\n  - Start and contain only an alphanumeric characters (A-Z, a-z, 0-9).<br>\n  - May include dots ('.'), hyphens ('-'), and underscores ('_').<br>\n  - Have a length between 1 and 50 characters."
              }
            ]
          },
          "buyer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Buyer"
              },
              {
                "description": "Buyer information."
              }
            ]
          },
          "allowUpdatePersonalDetails": {
            "type": "boolean",
            "description": "Indicates whether updating personal data is allowed.",
            "default": false,
            "example": true
          },
          "threeDS": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ThreeDSInfo"
              },
              {
                "description": "3DS information"
              }
            ]
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          },
          "returnURL": {
            "type": "string",
            "description": "URL on which the buyer's browser is redirected in case of acceptance or refusal of payment on Monext Online.<br> The merchant must call getWebPaymentDetails or GET /sessions.",
            "example": "https://yourdomain.com:8080/route/1.0/returns"
          },
          "notificationURL": {
            "type": "string",
            "description": "URL on which Monext Online will ask the merchant site to retrieve the result of the transaction.",
            "example": "https://yourdomain.com:8080/route/1.0/notifications"
          },
          "languageCode": {
            "type": "string",
            "description": "Buyer browser language by default. Example : FR",
            "example": "FR"
          },
          "customPaymentPageCode": {
            "type": "string",
            "description": "The identifier of customized template pages.<br> If not set, the default one will be used.<br>",
            "example": "vRsaSg2x3HsUC5cQzwlv"
          }
        }
      },
      "MXWalletSessionResponse": {
        "description": "Response object from a MXWallet session.",
        "type": "object",
        "required": [
          "result",
          "mxWalletSessionId"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "mxWalletSessionId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "MXWallet session unique identifier.",
            "example": "13fChMDzWfyVw6d2R2391553893852225"
          },
          "redirectURL": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "description": "URL to redirect the buyer to manage the MXWallet.<br> Only for not widget integration.",
            "example": "https://homologation-webpayment.payline.com/v2/?token=1KboRUMDkVHpHcsIpNUz1553947237037"
          }
        }
      },
      "MXWalletSessionDetailResponse": {
        "title": "SessionDetailResponse",
        "description": "The response object returned by the \"Get a MXWallet session detail\" service.",
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "mxWallet": {
            "$ref": "#/components/schemas/MXWalletDetail"
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          }
        }
      },
      "PaymentInstrumentRequest": {
        "title": "PaymentInstrumentRequest",
        "type": "object",
        "required": [
          "paymentInstrumentOrigin"
        ],
        "properties": {
          "paymentInstrumentOrigin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentInstrumentOrigin"
              },
              {
                "type": "object"
              },
              {
                "description": "Refers to the origin of a payment instrument to add or replace a payment instrument in a MXWallet."
              }
            ]
          },
          "comment": {
            "type": "string",
            "description": "Comment about this MXWallet.",
            "example": "a comment about this MXWallet"
          }
        }
      },
      "PaymentInstrumentResult": {
        "description": "The payment instrument response.",
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "paymentInstrument": {
            "$ref": "#/components/schemas/PaymentInstrumentDetail"
          }
        }
      },
      "TransactionActionRequest": {
        "title": "TransactionActionRequest",
        "type": "object",
        "description": "Action request for a transaction",
        "required": [
          "amount"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "comment": {
            "type": "string",
            "description": "Description of reason for cancel. It can be viewed on the transaction log accessible through the Merchant Administration Center.",
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^<>]*$",
            "example": "A comment."
          },
          "items": {
            "type": "array",
            "description": "The merchant must indicate the details of the order for a partial action on a transaction.",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          },
          "miscData": {
            "$ref": "#/components/schemas/MiscData"
          },
          "merchantReference": {
            "type": "string",
            "description": "Merchant reference of the action on a transaction.",
            "example": 173629
          }
        }
      },
      "TransactionActionResponse": {
        "title": "TransactionActionResponse",
        "type": "object",
        "description": "Action response for a transaction",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "transaction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionAction"
              },
              {
                "description": "Details of the payment transaction."
              }
            ]
          },
          "miscData": {
            "$ref": "#/components/schemas/MiscData"
          }
        }
      },
      "TransactionDetailResponse": {
        "title": "TransactionDetailResponse",
        "description": "The response object returned by the \"Get a transaction detail\" service.",
        "type": "object",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "transaction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionPayment"
              },
              {
                "description": "Transaction corresponding to the id sent."
              }
            ]
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Order"
              },
              {
                "description": "Order information."
              }
            ]
          },
          "buyer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Buyer"
              },
              {
                "description": "Buyer information."
              }
            ]
          },
          "delivery": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delivery"
              },
              {
                "description": "Delivery information."
              }
            ]
          },
          "device": {
            "$ref": "#/components/schemas/Device"
          },
          "authentication3DSecure": {
            "$ref": "#/components/schemas/Authentication3DSecure"
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          },
          "associatedTransactions": {
            "title": "AssociatedTransactions",
            "description": "List of all transactions associated with this transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedTransaction"
            }
          }
        }
      },
      "AssociatedTransaction": {
        "title": "AssociatedTransaction",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Associated transaction unique identifier.",
            "example": "21252144729379"
          },
          "type": {
            "$ref": "#/components/schemas/TransactionType"
          },
          "date": {
            "type": "string",
            "description": "Associated transaction date in ISO.",
            "format": "date-time"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "status": {
            "type": "string",
            "description": "Status of transaction",
            "enum": [
              "OK",
              "KO"
            ]
          },
          "originTransactionId": {
            "type": "string",
            "description": "Unique identifier of the associated transaction",
            "example": "19297181609357"
          }
        },
        "description": "List of Associated Transactions."
      },
      "AuthenticationContinueRequest": {
        "title": "AuthenticationRequest",
        "type": "object",
        "description": "To continue an authentification 3DS session.",
        "required": [
          "paymentMethodId",
          "order",
          "threeDS"
        ],
        "properties": {
          "paymentMethodId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodId"
              },
              {
                "description": "Specifies which of the acquiring contracts or PSP contracts shall be used for the payment."
              },
              {
                "example": "CB01"
              }
            ]
          },
          "order": {
            "description": "Order information",
            "$ref": "#/components/schemas/Order"
          },
          "payment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment"
              },
              {
                "type": "object"
              },
              {
                "description": "Payment information",
                "required": [
                  "paymentType",
                  "capture"
                ]
              }
            ]
          },
          "paymentInstrument": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentInstrument"
              },
              {
                "description": "Payment Instrument information."
              }
            ]
          },
          "buyer": {
            "title": "Buyer",
            "allOf": [
              {
                "$ref": "#/components/schemas/BuyerData"
              },
              {
                "description": "Buyer information."
              }
            ]
          },
          "delivery": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delivery"
              },
              {
                "description": "Delivery information."
              }
            ]
          },
          "threeDS": {
            "$ref": "#/components/schemas/ThreeDSInfoDirect"
          },
          "returnURL": {
            "type": "string",
            "description": "The URL of the system that receives the CRes message or Error Message.",
            "example": "https://domain.com:8080/route/1.0/returns"
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          }
        }
      },
      "AuthenticationCreateRequest": {
        "title": "AuthenticationRequest",
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": "This property represents the 3DS authentication session ID (MD field value). The 3DS authentication session ID provided by the merchant in the request, or generated by Monext if not provided.",
            "maxLength": 50,
            "minLength": 0,
            "example": "fa1d1376-0cb1-4310-906f-d1c20f7b6866"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthenticationContinueRequest"
          },
          {
            "description": "To initiate a 3DS authentification session."
          },
          {
            "type": "object",
            "required": [
              "paymentMethodId",
              "order",
              "payment",
              "paymentInstrument",
              "threeDS",
              "returnURL"
            ]
          }
        ]
      },
      "AuthenticationResponse": {
        "title": "AuthenticationResponse",
        "type": "object",
        "description": "The response object returned by the \\'Create a 3DS authentication session\\' service.",
        "required": [
          "result",
          "transaction"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "sessionId": {
            "$ref": "#/components/schemas/ThreeDSSessionId"
          },
          "transientData": {
            "$ref": "#/components/schemas/TransientData"
          },
          "authenticationResult": {
            "description": "Contains the result of the authentication session creation, allowing the authentication process to continue according to the required flow: Frictionless, 3DSMethod, or Challenge. <br> In the Frictionless flow, the provided information enables the direct execution of a \"create a payment\" (authorization) with 3D Secure frictionless authentication. In the 3DSMethod or Challenge flows, the necessary information is provided to make a request to proceed with the 3D Secure process.<br>",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Frictionless"
              },
              {
                "$ref": "#/components/schemas/ThreeDSMethod"
              },
              {
                "$ref": "#/components/schemas/Challenge"
              },
              {
                "$ref": "#/components/schemas/Failed"
              }
            ],
            "discriminator": {
              "propertyName": "authenticationFlow"
            }
          },
          "usedCard": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardBase"
              },
              {
                "description": "Card used for the authentication",
                "properties": {
                  "virtualCvx": {
                    "type": "string",
                    "maxLength": 4,
                    "minLength": 3,
                    "description": "Virtual CVV provided by Monext Online if requested by the merchant (ie. generateVirtualCvx set to 'true')",
                    "example": "123"
                  }
                }
              }
            ]
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          }
        }
      },
      "AuthenticationVerifyRequest": {
        "title": "AuthenticationVerifyRequest",
        "type": "object",
        "description": "To verify a 3DS authentification session.",
        "required": [
          "paymentMethodId",
          "challengeResult"
        ],
        "properties": {
          "paymentMethodId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodId"
              },
              {
                "description": "Specifies which of the acquiring contracts or PSP contracts shall be used for the payment."
              },
              {
                "example": "CB01"
              }
            ]
          },
          "challengeResult": {
            "$ref": "#/components/schemas/ChallengeResult"
          },
          "transientData": {
            "$ref": "#/components/schemas/TransientData"
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          }
        }
      },
      "AuthenticationVerifyResponse": {
        "title": "AuthenticationResponse",
        "type": "object",
        "description": "The response object returned by the \\'Verify a 3DS authentication session\\' service.",
        "required": [
          "result",
          "transaction"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              },
              {
                "description": "Result of the request when the response is valid."
              }
            ]
          },
          "sessionId": {
            "$ref": "#/components/schemas/ThreeDSSessionId"
          },
          "transientData": {
            "$ref": "#/components/schemas/TransientData"
          },
          "resultContainer": {
            "$ref": "#/components/schemas/ResultContainer"
          },
          "privateData": {
            "$ref": "#/components/schemas/PrivateData"
          }
        }
      },
      "DeviceInterface": {
        "title": "DeviceInterface",
        "type": "object",
        "description": "Device Interface App-based (SDK) or Browser-based (Browser) <br> Only use for POST PAYMENT (Direct Mode).",
        "properties": {
          "ip": {
            "$ref": "#/components/schemas/IP"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Browser"
          },
          {
            "$ref": "#/components/schemas/SDK"
          }
        ],
        "discriminator": {
          "propertyName": "deviceChannel"
        }
      },
      "Browser": {
        "type": "object",
        "description": "The Browser object is used to define the characteristics of the buyer's browser during a transaction or interaction.",
        "required": [
          "acceptHeader",
          "colorDepth",
          "javaEnabled",
          "javascriptEnabled",
          "language",
          "screenHeight",
          "screenWidth",
          "timeZoneOffset",
          "userAgent"
        ],
        "properties": {
          "acceptHeader": {
            "maxLength": 2048,
            "minLength": 0,
            "type": "string",
            "description": "The accept http header value sent to the merchant from the buyer's browser."
          },
          "javaEnabled": {
            "type": "boolean",
            "description": "Boolean value indicating whether the buyer's browser supports and can execute Java."
          },
          "javascriptEnabled": {
            "type": "boolean",
            "description": "Boolean value indicating javascript is enabled on the buyer's browser."
          },
          "language": {
            "type": "string",
            "description": "Value representing the browser language."
          },
          "colorDepth": {
            "type": "string",
            "description": "Value representing the buyer's browser color depth in bits per pixel, obtained via the screen.colorDepth property. <br> [values Codes - colorDepth.](See https://docs.monext.fr/display/DT/Codes+-+transStatus) <br> Values: <br>\n  - CD_1<br>\n  - CD_4<br>\n  - CD_8<br>\n  - CD_15<br>\n  - CD_16<br>\n  - CD_24<br>\n  - CD_32<br>\n  - CD_48",
            "enum": [
              "CD_1",
              "CD_4",
              "CD_8",
              "CD_15",
              "CD_16",
              "CD_24",
              "CD_32",
              "CD_48"
            ]
          },
          "screenHeight": {
            "maximum": 999999,
            "type": "integer",
            "description": "Total height of the buyer's device screen in pixels.",
            "format": "int32"
          },
          "screenWidth": {
            "maximum": 999999,
            "type": "integer",
            "description": "Total width of the buyer's device screen in pixels.",
            "format": "int32"
          },
          "timeZoneOffset": {
            "type": "integer",
            "description": "Time difference between UTC time and the buyer's browser local time, in minutes.",
            "format": "int32"
          },
          "userAgent": {
            "$ref": "#/components/schemas/BrowserUserAgent"
          }
        }
      },
      "SDK": {
        "type": "object",
        "description": "Parameters of the shopper application.",
        "required": [
          "appID",
          "deviceRenderOptionsUI",
          "deviceRenderingOptionsIF",
          "encData",
          "ephemPubKey",
          "referenceNumber",
          "transID"
        ],
        "properties": {
          "appID": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Universally unique ID created upon all installations and updates of the 3DS Requestor App on a Consumer Device. This will be newly generated and stored by the 3DS SDK for each installation or update.<br/>Length: 36 characters with JSON Data Type.<br/>Canonical format as defined in IETF RFC 4122. This may utilise any of the specified versions as long as the output meets specified."
          },
          "deviceRenderingOptionsIF": {
            "type": "string",
            "description": "Lists all of the SDK Interface types that the device supports for displaying specific challenge user interfaces within the SDK.",
            "enum": [
              "NATIVE",
              "HTML",
              "BOTH"
            ]
          },
          "deviceRenderOptionsUI": {
            "type": "string",
            "description": "Lists all UI types that the device supports for displaying specific challenge user interfaces within the SDK.",
            "enum": [
              "TEXT",
              "SINGLE_SELECT",
              "MULTI_SELECT",
              "OOB",
              "HTML_OTHER"
            ]
          },
          "ephemPubKey": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Public key component of the ephemeral key pair generated by the 3DS SDK and used to establish session keys between the 3DS SDK and ACS.<br/>In AReq, this data element is present as its own object.<br/>In ARes, this data element is contained within the ACS Signed Content JWS Object."
          },
          "maxTimeout": {
            "minimum": 5,
            "type": "integer",
            "description": "Indicates maximum duration (in minutes) for all exchanges.<br> Greater than or = 05",
            "format": "int32",
            "example": 10
          },
          "referenceNumber": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Identifies the vendor and version for the 3DS SDK that is integrated in a 3DS Requestor App, assigned by EMVCo when the 3DS SDK is approved."
          },
          "transID": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Universally unique transaction identifier assigned by the 3DS SDK to identify a single transaction."
          },
          "encData": {
            "maxLength": 64000,
            "minLength": 0,
            "type": "string",
            "description": "Encrypted data from device information."
          }
        }
      },
      "AuthenticationBase": {
        "title": "AuthenticationBase",
        "type": "object",
        "description": "Authentication base class",
        "properties": {
          "eci": {
            "description": "Determine whether a transaction is considered an authenticated transaction or an account verification.",
            "type": "string"
          },
          "effectiveAuthType": {
            "description": "Effective authentification type <br> Values : <br>\n - CH (Cardholder challenge) <br>\n - FD (Frictionless delegation) <br>\n - FR (Frictionless)",
            "type": "string"
          },
          "transStatus": {
            "description": "Indicates whether a transaction qualifies as an authenticated transaction or account verification.<br> [values Codes - transStatus.](See https://docs.monext.fr/display/DT/Codes+-+transStatus)",
            "type": "string"
          },
          "transStatusReason": {
            "description": "Provides information on why the transaction status field has the specified value. <br> [values Codes - transStatusReason.](See https://docs.monext.fr/display/DT/Codes+-+transStatusReason)",
            "type": "string"
          },
          "messageVersion": {
            "description": "3DSecure version",
            "type": "string"
          }
        }
      },
      "AuthenticationData": {
        "title": "AuthenticationData",
        "type": "object",
        "description": "Information about 3D-Secure authentication.",
        "properties": {
          "resultContainer": {
            "$ref": "#/components/schemas/ResultContainer"
          },
          "challengeResult": {
            "$ref": "#/components/schemas/ChallengeResult"
          },
          "transientData": {
            "$ref": "#/components/schemas/TransientData"
          }
        }
      },
      "Authentication3DSecure": {
        "title": "Authentication3DSecure",
        "properties": {
          "sessionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ThreeDSSessionId"
              },
              {
                "description": "This value represents the 3DS authentication session ID (MD field value)."
              }
            ]
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthenticationData"
          },
          {
            "description": "Data for 3D-Secure authentication."
          }
        ]
      },
      "AuthenticationResultData": {
        "title": "Authentication",
        "type": "object",
        "description": "Result data of the payment authentication when performed with a card.<br> Provided only if authentication has occurred.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthenticationBase"
          },
          {
            "type": "object",
            "properties": {
              "threeDSRequestorChallengeInd": {
                "description": "Indicates the challenge requested for this transaction, <br> see [values Codes - ChallengeInd.](https://docs.monext.fr/display/DT/Codes+-+ChallengeInd)",
                "type": "string"
              },
              "liabilityShift": {
                "description": "Indicates the liability shift for the transaction.",
                "type": "boolean",
                "example": true
              }
            }
          }
        ]
      },
      "ThreeDSSessionId": {
        "title": "ThreeDSSessionId",
        "type": "string",
        "description": "The session ID provided by the merchant in the request, or generated by Monext if not provided. This value represents the 3DS authentication session ID (MD field value).",
        "maxLength": 50,
        "minLength": 0,
        "example": "fa1d1376-0cb1-4310-906f-d1c20f7b6866"
      },
      "ThreeDSInfo": {
        "title": "ThreeDSInfo",
        "type": "object",
        "description": "3DSecure information.",
        "properties": {
          "merchantName": {
            "type": "string",
            "description": "Name displayed on the ACS authentication page. Monext Online uses by default the value set up in the 'payment method'."
          },
          "challengeInd": {
            "type": "string",
            "description": "Indicates whether a challenge is requested for this transaction, see [values Codes - ChallengeInd.](https://docs.monext.fr/display/DT/Codes+-+ChallengeInd)<br>\n  - NO_PREFERENCE (01)<br>\n  - ISSUER_TRA (02)<br>\n  - CHALLENGE_REQUESTED (03)<br>\n  - CHALLENGE_MANDATE (04)<br>\n  - ACQUIRER_TRA (05)<br>\n  - CB_SCORING (90)<br>",
            "enum": [
              "NO_PREFERENCE",
              "ISSUER_TRA",
              "CHALLENGE_REQUESTED",
              "CHALLENGE_MANDATE",
              "ACQUIRER_TRA",
              "CB_SCORING"
            ],
            "example": "CHALLENGE_REQUESTED",
            "default": "NO_PREFERENCE"
          },
          "merchantScore": {
            "type": "string",
            "description": "Merchant established score (For CB payment)."
          }
        }
      },
      "ThreeDSInfoDirect": {
        "title": "ThreeDSInfo",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreeDSInfo"
          },
          {
            "type": "object"
          },
          {
            "description": "3DSecure information (Direct Mode)."
          },
          {
            "required": [
              "merchantName",
              "challengeInd",
              "threeDSMethodResult",
              "threeDSMethodNotificationURL",
              "deviceInterface"
            ],
            "properties": {
              "threeDSMethodResult": {
                "type": "string",
                "description": "Indicates whether the 3DS Method successfully completed. <br> - INITIAL (I) : Value for to initiate an authentication 3DS session. <br> - SUCCESSFUL (Y) : 3DS method succeeded. <br> - FAILED (N) : 3DS method failed or no response received. <br> - UNAVAILABLE (U) :   . <br> - DEVICE_DATA_COLLECTION (D) :     . <br>",
                "enum": [
                  "INITIAL",
                  "SUCCESSFUL",
                  "FAILED",
                  "UNAVAILABLE",
                  "DEVICE_DATA_COLLECTION"
                ],
                "example": "INITIAL"
              },
              "threeDSMethodNotificationURL": {
                "type": "string",
                "description": "Fully qualified URL where the merchant receive the notification of the completion result of the 3DS Method (server to server notification).",
                "example": "www.thisIsAnExample.com"
              },
              "transientData": {
                "$ref": "#/components/schemas/TransientData"
              },
              "deviceInterface": {
                "$ref": "#/components/schemas/DeviceInterface"
              },
              "challengeWindowSize": {
                "type": "string",
                "description": "Specifies the dimensions of the challenge window presented to the buyer during the authentication challenge flow.<br> values: <br>\n  - 250X400 (01) <br>\n  - 390X400 (02) <br>\n  - 500X600 (03) <br>\n  - 600X400 (04) <br>\n  - FULLSCREEN (05)",
                "enum": [
                  "WS_250X400",
                  "WS_390X400",
                  "WS_500X600",
                  "WS_600X400",
                  "FULLSCREEN"
                ],
                "example": "FULLSCREEN"
              },
              "priorAuthData": {
                "type": "string",
                "description": "Data supports a specific authentication process.<br> In the current version of the specification this data element is not defined in detail,<br> however the intention is that for each 3DS Requestor Authentication Method, this field carry data that the ACS can use to verify the authentication process.<br> In future versions of the specification, these details are expected to be included."
              },
              "priorAuthMethod": {
                "type": "string",
                "description": "Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.",
                "enum": [
                  "FRICTIONLESS_AUTH_ACS",
                  "CARDHOLDER_CHALLENGE_ACS",
                  "AVS_VERIFIED",
                  "OTHER"
                ]
              },
              "priorAuthTimestamp": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Date",
                    "description": "Date and time in UTC of the prior cardholder authentication.<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ"
                  }
                ]
              }
            }
          }
        ]
      },
      "ThreeDSFlowRequest": {
        "title": "ThreeDSFlowRequest",
        "type": "object",
        "description": "Contains the necessary data for submitting a request during the 3D Secure authentication process. <br> This request can be used in both 3DSMethod and Challenge flows.",
        "required": [
          "url",
          "method",
          "payload"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "The endpoint URL where the authentication request should be sent.",
            "example": "https://acs.example.com/challenge"
          },
          "method": {
            "type": "string",
            "description": "The HTTP method to be used for the request (e.g., POST, PUT, PATCH).",
            "enum": [
              "POST",
              "PUT",
              "PATCH"
            ],
            "example": "POST"
          },
          "payload": {
            "$ref": "#/components/schemas/Payload"
          }
        }
      },
      "Payload": {
        "title": "Payload",
        "type": "object",
        "description": "Defines the structure of the request payload, which can be sent in various formats depending on the API requirements.",
        "required": [
          "type",
          "parameters"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Defines the content type of the request body.",
            "enum": [
              "form-data",
              "x-www-form-urlencoded",
              "raw",
              "binary",
              "GraphQL"
            ],
            "default": "form-data",
            "example": "form-data"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A collection of key-value pairs representing the data to be sent in the request body.<br> - For `form-data` and `x-www-form-urlencoded`, it represents form fields.<br> - For `raw`, it contains the text representation of the request (JSON, XML, etc.).<br> - For `binary`, it represents a base64-encoded string of the binary content.<br> - For `GraphQL`, it contains the query and optional variables.<br>\n",
            "example": {
              "creq": "ewogICAgImFjc1RyYW5zSUQiOiAiYzg2YWVmMzctMTU3Mi00MWFmLWEwMTQtY2I3MTIwOTc3Yzc5IiwKICAgICJjaGFsbGVuZ2VXaW5kb3dTaXplIjogIjAzIiwKICAgICJtZXNzYWdlVHlwZSI6ICJDUmVxIiwKICAgICJtZXNzYWdlVmVyc2lvbiI6ICIyLjIuMCIsCiAgICAidGhyZWVEU1NlcnZlclRyYW5zSUQiOiAiNTliMDAzM2UtOGMyYi01NGI2LTgwMDAtMDAwMDAwNTE0MzVhIgp9",
              "threeDSMethodData": "eyAidGhyZWVEU1NlcnZlclRyYW5zSUQiIDogIjg0MzRiNWViLWM4MjYtNTA4Ni04MDAwLTAwMDAwMDUxNDc5ZiIsICJ0aHJlZURTTWV0aG9kTm90aWZpY2F0aW9uVVJMIiA6ICJodHRwOi8vbG9jYWxob3N0OjMwMDAvcmVjZWl2ZV9mb3JtIiB9"
            }
          }
        }
      },
      "ThreeDSMethod": {
        "title": "threeDSMethod",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreeDSFlowRequest"
          },
          {
            "type": "object"
          },
          {
            "description": "Contains the necessary data for submitting a request during the 3D Secure authentication process, when 3DSMethod flow."
          },
          {
            "example": {
              "threeDSMethodData": "eyAidGhyZWVEU1NlcnZlclRyYW5zSUQiIDogIjg0MzRiNWViLWM4MjYtNTA4Ni04MDAwLTAwMDAwMDUxNDc5ZiIsICJ0aHJlZURTTWV0aG9kTm90aWZpY2F0aW9uVVJMIiA6ICJodHRwOi8vbG9jYWxob3N0OjMwMDAvcmVjZWl2ZV9mb3JtIiB9"
            }
          }
        ]
      },
      "Challenge": {
        "title": "Challenge",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreeDSFlowRequest"
          },
          {
            "type": "object"
          },
          {
            "description": "Contains the necessary data for submitting a request during the 3D Secure authentication process, when Challenge flow."
          },
          {
            "example": {
              "type": "form-data",
              "paramaters": {
                "creq": "ewogICAgImFjc1RyYW5zSUQiOiAiYzg2YWVmMzctMTU3Mi00MWFmLWEwMTQtY2I3MTIwOTc3Yzc5IiwKICAgICJjaGFsbGVuZ2VXaW5kb3dTaXplIjogIjAzIiwKICAgICJtZXNzYWdlVHlwZSI6ICJDUmVxIiwKICAgICJtZXNzYWdlVmVyc2lvbiI6ICIyLjIuMCIsCiAgICAidGhyZWVEU1NlcnZlclRyYW5zSUQiOiAiNTliMDAzM2UtOGMyYi01NGI2LTgwMDAtMDAwMDAwNTE0MzVhIgp9"
              }
            }
          }
        ]
      },
      "Frictionless": {
        "title": "Frictionless",
        "type": "object",
        "description": "Contains the necessary data for create a payment (authorization) with 3D Secure frictionless authentication.",
        "properties": {
          "resultContainer": {
            "$ref": "#/components/schemas/ResultContainer"
          }
        }
      },
      "Failed": {
        "title": "Failed",
        "type": "object",
        "description": "Object returned in case of an authentication failure.<br> Contains details about the failure and any relevant information needed for further handling.",
        "properties": {
          "resultContainer": {
            "$ref": "#/components/schemas/ResultContainer"
          }
        }
      },
      "CardBase": {
        "title": "CardBase",
        "type": "object",
        "description": "Base class for Card classes",
        "properties": {
          "holderName": {
            "type": "string",
            "maxLength": 50,
            "minLength": 2,
            "description": "Name of the cardholder present on the card (given by the customer)",
            "example": "JOHN DOE"
          },
          "expirationDate": {
            "$ref": "#/components/schemas/ExpirationDate"
          },
          "mxToken": {
            "$ref": "#/components/schemas/CardMxToken"
          }
        }
      },
      "Card": {
        "title": "Card",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardBase"
          },
          {
            "type": "object",
            "description": "Details of the card used in the payment",
            "properties": {
              "maskedNumber": {
                "type": "string",
                "description": "Masked number of the card used in the payment transaction.",
                "maxLength": 19,
                "minLength": 13,
                "example": "111122XXXXXX4444"
              },
              "panType": {
                "$ref": "#/components/schemas/PanType"
              },
              "country": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Country"
                  },
                  {
                    "description": "Issuing bank country code of the card used in the payment transaction.<br> See [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)"
                  },
                  {
                    "default": ""
                  }
                ]
              },
              "issuer": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Issuer",
                    "description": "Issuer of the card used in the payment transaction."
                  }
                ]
              },
              "product": {
                "type": "string",
                "description": "Product code of the card used in the payment transaction.<br> See [Product codes](https://docs.payline.com/display/DT/Codes+-+Produit)",
                "maxLength": 100,
                "minLength": 0,
                "example": "Visa Infinite"
              },
              "selectedNetwork": {
                "$ref": "#/components/schemas/SelectedNetwork"
              },
              "network": {
                "type": "string",
                "description": "Indicates the network or networks associated with the card. <br> It can be either a card on a single network, such as CB, VISA, or MASTERCARD \"only\", <br> or a \"co-branded\" card like CB-VISA or CB-MASTERCARD.\" <br> Exemples : CB, VISA, MASTERCARD, CB-VISA, CB-MASTERCARD",
                "example": "CB-VISA"
              }
            }
          }
        ]
      },
      "CardManualEntry": {
        "title": "CardManualEntry",
        "required": [
          "type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardBase"
          },
          {
            "type": "object",
            "description": "Card information for payment.",
            "properties": {
              "encryptedData": {
                "type": "string",
                "description": "The encrypted data contains sensitive card information. including:<br> - `number`: Card number (e.g., \"4444333322221111\")<br> - `expirationDate`: Card expiration date, format MMYY (e.g., 1230)<br> - `cvx`: Card verification code (e.g., Visual cryptogram on the back of the credit card.)<br> - `holderName`: Cardholder's name<br> The data must be in JSON format before being encrypted.<br> Use JWE format for this failed.<br> The encryption key ID (kid) must be present in the JWE header.<br> For more details, refer to JSON Web Encryption (JWE).<br> Example :<br> ``` // JWE Header { alg:'RSA-OAEP-256', enc:'A256GCM' , kid:'23456' })\n// Data to be encrypt {\n    \"number\": \"4444333322221111\",\n    \"expirationDate\": \"1230\",\n    \"cvx\": \"123\",\n    \"holderName\": \"John Doe\"\n} ```",
                "example": "eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiO../.."
              },
              "number": {
                "$ref": "#/components/schemas/CardNumber"
              },
              "cvx": {
                "type": "string",
                "maxLength": 4,
                "minLength": 3,
                "description": "Visual cryptogram on the back of the credit card.",
                "example": "123"
              },
              "selectedNetwork": {
                "$ref": "#/components/schemas/SelectedNetwork"
              }
            }
          }
        ]
      },
      "UsedCard": {
        "title": "UsedCard",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Card"
          }
        ]
      },
      "MXWallet": {
        "title": "MXWallet",
        "type": "object",
        "required": [
          "id"
        ],
        "description": "To be used, when the merchant or buyer chooses to pay using a payment instrument previously stored in a MXWallet",
        "properties": {
          "id": {
            "type": "string",
            "description": "Wallet Id.",
            "example": "WALLET123"
          },
          "paymentInstrumentRank": {
            "$ref": "#/components/schemas/PaymentInstrumentRank"
          }
        }
      },
      "MXWalletDetail": {
        "title": "MXWallet",
        "type": "object",
        "description": "MXWallet detail",
        "required": [
          "id",
          "paymentInstruments"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Wallet Id.",
            "example": "WALLET123"
          },
          "holder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Person"
              },
              {
                "description": "The holder of the MXWallet."
              }
            ]
          },
          "paymentInstruments": {
            "type": "array",
            "description": "List of the payment instruments in the MXWallet",
            "items": {
              "$ref": "#/components/schemas/PaymentInstrumentDetail"
            }
          },
          "comment": {
            "type": "string",
            "description": "Comment about this MXWallet.",
            "example": "a comment about this MXWallet"
          }
        }
      },
      "BankAccountData": {
        "title": "BankAccount",
        "allOf": [
          {
            "title": "BankAccountBase",
            "type": "object",
            "description": "BankAccountBase",
            "properties": {
              "bic": {
                "type": "string",
                "description": "The BIC (Bank Identifier Code)is an international identifier for a bank.",
                "example": "BDFEFR2L"
              },
              "holderName": {
                "type": "string",
                "description": "The full name of the account holder.",
                "example": "John Do"
              }
            }
          },
          {
            "type": "object",
            "description": "Information about the bank account.<br> Used in response.",
            "required": [
              "bic",
              "maskedIban"
            ],
            "properties": {
              "maskedIban": {
                "type": "string",
                "description": "The IBAN (International Bank Account Number) is a sequence of numbers and letters that breaks down as follows: <br> The first two letters represent the country code (e.g., FR for France). <br> They are followed by a two-digit check key. The remaining part represents the bank account number. <br> The IBAN is sensitive data; in this field, most characters are masked.",
                "example": "FR76XXXXXXXXXXXXXXXXXXXXX85"
              },
              "country": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Country"
                  }
                ],
                "default": ""
              }
            }
          }
        ]
      },
      "UsedAlternativePaymentMethod": {
        "title": "UsedAlternativePaymentMethod",
        "type": "object",
        "description": "Payment with an alternative payment method"
      },
      "TransactionBase": {
        "title": "TransactionBase",
        "type": "object",
        "description": "Details of the payment transaction",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Monext transaction identifier.",
            "maxLength": 50,
            "minLength": 0,
            "example": "127382"
          },
          "date": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date",
                "description": "Processing date and time of the transaction.<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ"
              }
            ]
          }
        }
      },
      "TransactionPayment": {
        "title": "Transaction",
        "type": "object",
        "description": "Details of the payment transaction.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionBase"
          },
          {
            "type": "object"
          },
          {
            "description": "Details of the payment transaction.",
            "properties": {
              "type": {
                "$ref": "#/components/schemas/TransactionType"
              },
              "currency": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Currency"
                  }
                ]
              },
              "paymentType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentType"
                  },
                  {
                    "description": "Payment type (payment use case) of the processed payment."
                  }
                ]
              },
              "capture": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Capture"
                  },
                  {
                    "description": "Capture mode of the processed transaction."
                  }
                ]
              },
              "requestedAmount": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  },
                  {
                    "description": "Amount requested by the merchant in the authorization request."
                  }
                ]
              },
              "authorizedAmount": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Amount"
                  },
                  {
                    "description": "Amount authorized by the issuer or PSP empty if equal to the requested amount. <br> NOT USED YET"
                  }
                ]
              },
              "paymentMethodId": {
                "title": "PaymentMethodId",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentMethodId"
                  },
                  {
                    "description": "paymentMethodId used for the payment."
                  },
                  {
                    "example": "CB01"
                  }
                ]
              },
              "externalWallet": {
                "type": "string",
                "description": "Designates the wallet used in the transaction.<br> Values: APPLE_PAY, GOOGLE_PAY, SAMSUNG_PAY, ..."
              },
              "paymentInstrumentData": {
                "title": "PaymentInstrumentData",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentInstrumentData"
                  },
                  {
                    "description": "Details of the payment instrument used in the processed transaction."
                  }
                ]
              },
              "softDescriptor": {
                "$ref": "#/components/schemas/SoftDescriptor"
              },
              "partnerReturnedData": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PartnerReturnedData"
                  },
                  {
                    "description": "Payment service provider specific result data.<br> Format depends on the payment method which is described in the documentation of this payment method."
                  }
                ]
              },
              "authenticationResultData": {
                "$ref": "#/components/schemas/AuthenticationResultData"
              },
              "fraud": {
                "$ref": "#/components/schemas/Fraud"
              }
            }
          }
        ]
      },
      "TransactionAction": {
        "title": "Transaction",
        "type": "object",
        "description": "Details of the transaction for this action.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionBase"
          },
          {
            "type": "object"
          },
          {
            "description": "Details of the transaction for this action.",
            "properties": {
              "type": {
                "$ref": "#/components/schemas/TransactionType"
              }
            }
          }
        ]
      },
      "RecurringPayment": {
        "title": "RecurringPayment",
        "type": "object",
        "description": "to initiate a [Installment Plan](https://docs.monext.fr/pages/viewpage.action?pageId=779390044) <br> or a [Subscription](https://docs.monext.fr/pages/viewpage.action?pageId=779390016) <br>",
        "properties": {
          "installmentAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {
                "description": "The amount for each installment after the first (initial) installement.<br> The amount is expressed in the smallest currency unit.<br> For example, 1€ value must be 100.<br>"
              }
            ]
          },
          "firstInstallmentAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {
                "description": "The first installment. The amount is expressed in the smallest currency unit."
              }
            ]
          },
          "cumulatedAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {
                "description": "In case of installment or recurring payment this parameter specifies the amount paid up to now.<br> The amount does not include this last payment.<br> The amount is expressed in the smallest currency unit."
              }
            ]
          },
          "installmentNumber": {
            "type": "integer",
            "description": "The number off the installment (from 1 to n, where n is the total installments) This value has to be set when used in the \"Create a payment\" service (POST ../payments)",
            "minimum": 1
          },
          "totalInstallments": {
            "type": "integer",
            "description": "Total installments for the payment plan.<br> Mandatory for Installment Plan, Optional for Subscription (Reccuring payment)",
            "minimum": 1,
            "example": 12
          },
          "frequency": {
            "type": "string",
            "description": "The frequency of the payments or installments : <br> Values : [frequency values](https://docs.monext.fr/display/DT/Codes+-+Frequence)",
            "enum": [
              "DAILY",
              "WEEKLY",
              "FORTNITHLY",
              "MONTHLY",
              "BIMONTHLY",
              "QUARTERLY",
              "SEMIANNUALLY",
              "YEARLY",
              "BIENNIALLY"
            ],
            "example": "MONTHLY"
          },
          "installmentDate": {
            "type": "integer",
            "description": "The date of the month for the installment. (between 1 and 31).",
            "minimum": 1,
            "maximum": 31,
            "example": 20
          },
          "startDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date",
                "description": "The start date for the payment plan."
              }
            ]
          },
          "endDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date",
                "description": "The end date for the payment plan."
              }
            ]
          }
        },
        "required": [
          "installmentAmount",
          "initialInstallmentAmount",
          "frequency",
          "installmentDate"
        ]
      },
      "PaymentPlan": {
        "title": "PaymentPlan",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RecurringPayment"
          },
          {
            "type": "object"
          },
          {
            "description": "PaymentPlan is an object that represents either an [Installment Plan](https://docs.monext.fr/pages/viewpage.action?pageId=779390044) or a [Subscription](https://docs.monext.fr/pages/viewpage.action?pageId=779390016)."
          },
          {
            "properties": {
              "id": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentPlanId"
                  }
                ]
              },
              "installments": {
                "description": "List of installments.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Installment"
                }
              },
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Status"
                  },
                  {
                    "description": "Status of the paymentPlan. (ACTIVE or INACTIVE)"
                  }
                ]
              },
              "inactiveStatusDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Date",
                    "description": "The date and time when the PaymentPlan was set to INACTIVE status. <br> This field is populated only when the plan is deactivated and remains null for active plans. <br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ"
                  }
                ]
              }
            }
          }
        ],
        "required": [
          "id",
          "installmentAmount",
          "initialInstallmentAmount",
          "frequency",
          "installmentDate",
          "installments",
          "status"
        ]
      },
      "Installment": {
        "title": "Installment",
        "type": "object",
        "description": "Represents an individual installment within a recurring payment plan or subscription. <br> This object contains details about the specific installment, including its amount, due date, status, and other relevant information.",
        "properties": {
          "mxWalletId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MXWalletId"
              },
              {
                "description": "The unique identifier of Monext virtual wallet.<br> You must provide Monext with an unique identifier that corresponds to one and only one buyer on your information system.<br> This identifier will be used when you request a payment by Monext virtual wallet.<br> MXWallet ID must:<br>\n  - Start and contain only an alphanumeric characters (A-Z, a-z, 0-9).<br>\n  - May include dots ('.'), hyphens ('-'), and underscores ('_').<br>\n  - Have a length between 1 and 50 characters."
              }
            ]
          },
          "paymentPlanId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentPlanId"
              }
            ]
          },
          "number": {
            "type": "integer",
            "description": "The number off the installment",
            "minimum": 1
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              },
              {
                "description": "The amount of the installment The amount is expressed in the smallest currency unit.<br> For example, 1€ value must be 100.<br>"
              }
            ]
          },
          "dueDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date",
                "description": "The due date for this installment payment. <br> This is the scheduled date on which the payment is expected to be executed, or the date on which the payment was actually made if it has already been completed."
              }
            ]
          },
          "attempts": {
            "type": "integer",
            "description": "The number of payment attempts made."
          },
          "status": {
            "type": "string",
            "description": "The status of the installment. <br> Values:<br> - `UPCOMING`: installment to be processed.<br> - `ACCEPTED`: installment successfully processed.<br> - `FAILED`: installment failed.<br> - `RETRYING`: current installment, a retry is scheduled after one or more failures.<br> - `DISABLED`: installment is disabled (caused by multiple return codes).<br> - `SETTLED`: installment settled, meaning funds have been transferred.<br> - `REFUSED`: installment refused.",
            "enum": [
              "UPCOMING",
              "ACCEPTED",
              "FAILED",
              "RETRYING",
              "DISABLED",
              "SETTLED",
              "REFUSED"
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the payment is currently active."
          },
          "complement": {
            "type": "string",
            "description": "Additional information or status related to the payment."
          },
          "transaction": {
            "title": "Transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionBase"
              },
              {
                "description": "The transaction associated with the installment, containing details of the payment once it has been processed. <br> This field will be empty if the installment has not yet been executed."
              }
            ]
          },
          "lastUpdate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Date",
                "description": "The date when the payment detail was last updated."
              }
            ]
          }
        },
        "required": [
          "walletId",
          "recurringPlanId",
          "number",
          "amount",
          "attempts",
          "status",
          "active"
        ]
      },
      "PaymentInstrumentBase": {
        "title": "PaymentInstrumentBase",
        "type": "object",
        "description": "Payment Instrument Base"
      },
      "PaymentInstrument": {
        "title": "PaymentInstrument",
        "type": "object",
        "description": "Gives the information about the kind of payment used for the transaction.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrumentBase"
          },
          {
            "description": "Gives the information about the kind of payment used for the transaction."
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardManualEntry"
          },
          {
            "$ref": "#/components/schemas/MXWallet"
          }
        ],
        "discriminator": {
          "description": "-> The \"selectedPaymentInstrument\" field serves as a discriminator within the \"PaymentInstrument\" object.<br> This field uniquely identifies the chosen payment instrument.",
          "propertyName": "selectedPaymentInstrument",
          "example": "CardManualEntry"
        }
      },
      "PaymentInstrumentOrigin": {
        "title": "PaymentInstrument",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrumentBase"
          },
          {
            "description": "Refers to the origin of a payment instrument."
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/ExistingTransaction"
          }
        ],
        "discriminator": {
          "propertyName": "origin",
          "example": "ExistingTransaction"
        }
      },
      "ExistingTransaction": {
        "title": "ExistingTransaction",
        "type": "object",
        "description": "Refers to an existing transaction by its identifier.",
        "required": [
          "transactionId"
        ],
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Transaction ID of an accepted authorization issued using the card the merchant stores on file.",
            "maxLength": 200,
            "minLength": 0,
            "example": "14146124936410"
          }
        }
      },
      "PaymentInstrumentData": {
        "title": "PaymentInstrument",
        "type": "object",
        "description": "Use as a result in a transaction",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrumentBase"
          },
          {
            "type": "object"
          },
          {
            "description": "Use as a result in a transaction",
            "properties": {
              "paymentInstrumentType": {
                "title": "PaymentInstrumentType",
                "description": "Type of instrument used for the payment",
                "$ref": "#/components/schemas/PaymentInstrumentType"
              },
              "mxWallet": {
                "title": "MXWallet",
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MXWallet"
                  },
                  {
                    "type": "object"
                  },
                  {
                    "description": "The Monext Wallet used for the payment. <br> Empty is transaction not iniatiate by a Monext Wallet"
                  }
                ]
              }
            }
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/UsedCard"
          },
          {
            "$ref": "#/components/schemas/UsedAlternativePaymentMethod"
          }
        ],
        "discriminator": {
          "propertyName": "usedPaymentInstrument"
        }
      },
      "CardInstrument": {
        "title": "CardInstrument",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Card"
          },
          {
            "description": "Refers to a payment instrument card in a MXWallet"
          }
        ]
      },
      "BankAccountInstrument": {
        "title": "BankAccountInstrument",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BankAccountData"
          },
          {
            "description": "Refers to a payment instrument BankAccount (IBAN) in a MXWallet"
          }
        ]
      },
      "ExternalAccountInstrument": {
        "title": "ExternalAccountInstrument",
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The identifier associated with the user's account, used for authentication and identification purposes. <br> e.g. : Login, email, id, name, phonenumber, ... <br> Ex: john.doe@mail.com (for PAYPAL)"
          }
        }
      },
      "PaymentInstrumentDetail": {
        "title": "PaymentInstrument",
        "type": "object",
        "description": "Detailed information about a payment instrument stored in an MXWallet.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentInstrumentBase"
          },
          {
            "type": "object"
          },
          {
            "description": "Detailed information about a payment instrument stored in an MXWallet."
          },
          {
            "required": [
              "rank",
              "status",
              "state",
              "paymentInstrumentType",
              "category",
              "isDefault"
            ]
          },
          {
            "properties": {
              "rank": {
                "$ref": "#/components/schemas/PaymentInstrumentRank"
              },
              "paymentInstrumentType": {
                "title": "PaymentInstrumentType",
                "description": "Type of payment instrument",
                "$ref": "#/components/schemas/PaymentInstrumentType"
              },
              "isDefault": {
                "type": "boolean",
                "description": "true if it is the default payment instrument",
                "default": false,
                "example": false
              },
              "status": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Status"
                  },
                  {
                    "description": "Status of the paymentInstrument. (ACTIVE or INACTIVE)"
                  }
                ]
              },
              "state": {
                "type": "string",
                "enum": [
                  "TOKENIZED",
                  "TOKEN_REVOKED",
                  "STORED",
                  "UPDATED",
                  "UNDER_TOKENIZATION"
                ],
                "description": "Represents the current state of the payment instrument, indicating its status as tokenized, revoked, stored, updated, or undergoing tokenization.",
                "default": "STORED",
                "example": "STORED"
              }
            }
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/CardInstrument"
          },
          {
            "$ref": "#/components/schemas/ExternalAccountInstrument"
          }
        ],
        "discriminator": {
          "propertyName": "category",
          "default": "CardInstrument",
          "example": "CardInstrument"
        }
      },
      "OrderReference": {
        "title": "OrderReference",
        "pattern": "[^//]*",
        "type": "string",
        "description": "Merchant order reference.<br> Unique order reference defined by the merchant. This reference is used in our duplicate detection system.",
        "maxLength": 50,
        "minLength": 0,
        "example": "550e8400-e29b-41d4-a716-446655440000"
      },
      "PointOfSaleReference": {
        "type": "string",
        "description": "Point of sale reference identifier (unique by Merchant).<br> It is set by the user during the creation of the point of sale and cannot be modified afterward.<br> Point of sale reference must:<br>\n  - Start and contain only an alphanumeric characters (A-Z, a-z, 0-9).<br>\n  - May include dots ('.'), hyphens ('-'), and underscores ('_').<br>\n  - Have a length between 1 and 50 characters.",
        "minimum": 1,
        "maximum": 50,
        "pattern": "^(?=.{1,50}$)[A-Za-z0-9]+[A-Za-z0-9\\.\\-_]+$",
        "example": "REF_1"
      },
      "CardNumber": {
        "title": "CardNumber",
        "type": "string",
        "maxLength": 20,
        "minLength": 0,
        "description": "Card number (PAN).",
        "example": "444433322221111"
      },
      "CardMxToken": {
        "title": "CardMxToken",
        "type": "string",
        "description": "Monext alias of the card number.",
        "maxLength": 19,
        "minLength": 13,
        "example": "1111gPNzHtyu4444"
      },
      "PanType": {
        "title": "PanType",
        "type": "string",
        "enum": [
          "CARD_PAN",
          "NETWORK_TOKEN",
          "DEVICE_TOKEN",
          "UPDATED_PAN"
        ],
        "description": "The type of PAN used in the transaction. <br> Values: CARD_PAN, NETWORK_TOKEN, DEVICE_TOKEN, UPDATED_PAN",
        "example": "CARD_PAN"
      },
      "PaymentType": {
        "title": "PaymentType",
        "type": "string",
        "description": "#\n  This parameter specifies the payment use case.<br>\n  For example:  for a single payment, set it to ONE_OFF, for an account verification request set it to ACCOUNT_VERIFICATION, …<br>\n  [See paymentType attribute values page](/reference/paymenttype-attribute-values)",
        "enum": [
          "ONE_OFF",
          "MX_INSTALLMENT",
          "MX_RECURRING",
          "ACCOUNT_VERIFICATION",
          "RECURRING",
          "INSTALLMENT",
          "PRE_ORDER",
          "UNSCHEDULED",
          "RENTAL_SERVICES_PAYMENT",
          "DELAYED_CHARGE",
          "NO_SHOW",
          "CREDIT",
          "MULTIPLE_MERCHANTS",
          "BANK_TRANSFER"
        ],
        "default": "ONE_OFF",
        "example": "ONE_OFF"
      },
      "TransactionType": {
        "title": "TransactionType",
        "type": "string",
        "description": "Type of transaction<br> Specify whether it is an authorization, a capture, a refund, ...",
        "enum": [
          "AUTHORIZATION",
          "CAPTURE",
          "CANCEL",
          "REFUND",
          "CREDIT",
          "AUTHORIZATION_AND_CAPTURE",
          "ORDER",
          "REAUTHORIZATION_AND_CAPTURE",
          "DEBIT",
          "CHEQUE_SCORING",
          "REAUTHORIZATION",
          "AUTHORIZATION_AND_CAPTURE_COMPLEMENT",
          "SIGNATURE",
          "ACCOUNT_VERIFICATION"
        ]
      },
      "Capture": {
        "title": "Capture",
        "type": "string",
        "description": "This parameter specifies how the merchant want the transaction to be captured : <br>\n - automatically by Monext at order time, AUTOMATIC ; <br>\n - later at the merchant initiative, MANUAL ; <br>\n - or automatically by Monext at a later time, DEFERRED.\n\nDefault value : AUTOMATIC",
        "enum": [
          "AUTOMATIC",
          "MANUAL",
          "DEFERRED"
        ],
        "default": "AUTOMATIC",
        "example": "AUTOMATIC"
      },
      "PrivateData": {
        "title": "PrivateData",
        "type": "object",
        "additionalProperties": {
          "type": "string",
          "description": "${privateData.transaction.desc}",
          "example": "{\"property1\":\"value1\",\"property2\":\"value2\"}"
        },
        "description": "Additional data to be used throughout the payment lifecycle.<br> A dictionary of key-value pairs where the values can only be strings.<br> e.g. {\"suborderid\": \"AE-3023-001\", \"chanel\": \"mobile\"}",
        "example": {
          "property1": "value1",
          "property2": "value2"
        }
      },
      "MiscData": {
        "title": "MiscData",
        "type": "object",
        "additionalProperties": true,
        "description": "miscData can be transmit to the payment method partners.<br> Consult the payment method for each use.<br> miscData is a dictionary values can be of any type (aka free-form object) Example:<br> ``` {\n  \"key1\": \"value1\",\n  \"key2\": \"value2\"\n} ``` or ``` \"SBCC\": {\n  \"membershipStatus\": \"01\",\n  \"deferredPayment\": {\n      \"numberOfDays\": \"060\"\n} ```",
        "example": {
          "SBCC": {
            "membershipStatus": "01",
            "deferredPayment": {
              "numberOfDays": "060"
            }
          }
        }
      },
      "Country": {
        "title": "Country",
        "enum": [
          "AW",
          "AF",
          "AO",
          "AI",
          "AX",
          "AL",
          "AD",
          "AE",
          "AR",
          "AM",
          "AS",
          "AQ",
          "TF",
          "AG",
          "AU",
          "AT",
          "AZ",
          "BI",
          "BE",
          "BJ",
          "BQ",
          "BF",
          "BD",
          "BG",
          "BH",
          "BS",
          "BA",
          "BL",
          "BY",
          "BZ",
          "BM",
          "BO",
          "BR",
          "BB",
          "BN",
          "BT",
          "BV",
          "BW",
          "CF",
          "CA",
          "CC",
          "CH",
          "CL",
          "CN",
          "CI",
          "CM",
          "CD",
          "CG",
          "CK",
          "CO",
          "KM",
          "CV",
          "CR",
          "CU",
          "CW",
          "CX",
          "KY",
          "CY",
          "CZ",
          "DE",
          "DJ",
          "DM",
          "DK",
          "DO",
          "DZ",
          "EC",
          "EG",
          "ER",
          "EH",
          "ES",
          "EE",
          "ET",
          "FI",
          "FJ",
          "FK",
          "FR",
          "FO",
          "FM",
          "GA",
          "GB",
          "GE",
          "GG",
          "GH",
          "GI",
          "GN",
          "GP",
          "GM",
          "GW",
          "GQ",
          "GR",
          "GD",
          "GL",
          "GT",
          "GF",
          "GU",
          "GY",
          "HK",
          "HM",
          "HN",
          "HR",
          "HT",
          "HU",
          "ID",
          "IM",
          "IN",
          "IO",
          "IE",
          "IR",
          "IQ",
          "IS",
          "IL",
          "IT",
          "JM",
          "JE",
          "JO",
          "JP",
          "KZ",
          "KE",
          "KG",
          "KH",
          "KI",
          "KN",
          "KR",
          "KW",
          "LA",
          "LB",
          "LR",
          "LY",
          "LC",
          "LI",
          "LK",
          "LS",
          "LT",
          "LU",
          "LV",
          "MO",
          "MF",
          "MA",
          "MC",
          "MD",
          "MG",
          "MV",
          "MX",
          "MH",
          "MK",
          "ML",
          "MT",
          "MM",
          "ME",
          "MN",
          "MP",
          "MZ",
          "MR",
          "MS",
          "MQ",
          "MU",
          "MW",
          "MY",
          "YT",
          "NA",
          "NC",
          "NE",
          "NF",
          "NG",
          "NI",
          "NU",
          "NL",
          "NO",
          "NP",
          "NR",
          "NZ",
          "OM",
          "PK",
          "PA",
          "PN",
          "PE",
          "PH",
          "PW",
          "PG",
          "PL",
          "PR",
          "KP",
          "PT",
          "PY",
          "PS",
          "PF",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "SA",
          "SD",
          "SN",
          "SG",
          "GS",
          "SH",
          "SJ",
          "SB",
          "SL",
          "SV",
          "SM",
          "SO",
          "PM",
          "RS",
          "SS",
          "ST",
          "SR",
          "SK",
          "SI",
          "SE",
          "SZ",
          "SX",
          "SC",
          "SY",
          "TC",
          "TD",
          "TG",
          "TH",
          "TJ",
          "TK",
          "TM",
          "TL",
          "TO",
          "TT",
          "TN",
          "TR",
          "TV",
          "TW",
          "TZ",
          "UG",
          "UA",
          "UM",
          "UY",
          "US",
          "UZ",
          "VA",
          "VC",
          "VE",
          "VG",
          "VI",
          "VN",
          "VU",
          "WF",
          "WS",
          "YE",
          "ZA",
          "ZM",
          "ZW"
        ],
        "description": "2-letter country code, see [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) <br> example : <code>FR</code> for France",
        "maxLength": 2,
        "minLength": 2,
        "default": "FR",
        "example": "FR"
      },
      "ExpirationDate": {
        "title": "ExpirationDate",
        "maxLength": 4,
        "minLength": 4,
        "type": "string",
        "description": "Card expiry date : format MMYY",
        "example": "1233"
      },
      "Date": {
        "title": "Date",
        "type": "string",
        "description": "Date and time<br> Format ISO 8601: yyyy-MM-ddThh:mm:ssZ",
        "format": "date-time",
        "example": "2020-03-27T12:45:00Z"
      },
      "Amount": {
        "title": "Amount",
        "description": "The amount is expressed in the smallest currency unit.<br> For example, 1€ value must be 100.<br> Shall be set to 0 for an account verification query.",
        "type": "integer",
        "format": "int64",
        "maximum": 1000000000000000000,
        "minimum": 0,
        "example": 1000
      },
      "Currency": {
        "title": "Currency",
        "type": "string",
        "enum": [
          "EUR",
          "AED",
          "AFN",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BOV",
          "BRL",
          "BSD",
          "BTN",
          "BWP",
          "BYR",
          "BYN",
          "BZD",
          "CAD",
          "CDF",
          "CHE",
          "CHF",
          "CHW",
          "CLF",
          "CLP",
          "CNY",
          "COP",
          "COU",
          "CRC",
          "CUC",
          "CUP",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ERN",
          "ETB",
          "FJD",
          "FKP",
          "GBP",
          "GEL",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "IQD",
          "IRR",
          "ISK",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KPW",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LTL",
          "LVL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MRO",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MXV",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SDG",
          "SEK",
          "SGD",
          "SHP",
          "SLL",
          "SOS",
          "SRD",
          "SSP",
          "STD",
          "SVC",
          "SYP",
          "SZL",
          "THB",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "USN",
          "USS",
          "UYI",
          "UYU",
          "UZS",
          "VEF",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XAG",
          "XAU",
          "XBA",
          "XBB",
          "XBC",
          "XBD",
          "XCD",
          "XDR",
          "XFU",
          "XOF",
          "XPD",
          "XPF",
          "XPT",
          "XSU",
          "XTS",
          "XUA",
          "YER",
          "ZAR",
          "ZMW",
          "ZWL"
        ],
        "description": "The 3-letter currency code in ISO 4217 format. e.g. use EUR for Euro. Format : https://en.wikipedia.org/wiki/ISO_4217#Active_codes",
        "maxLength": 3,
        "minLength": 3,
        "default": "EUR",
        "example": "EUR"
      },
      "Email": {
        "title": "Email",
        "type": "string",
        "description": "Email address.",
        "maxLength": 150,
        "minLength": 0,
        "pattern": "^[\\w-\\.]+[\\w+]+@([\\w-]+\\.)+[\\w-]{2,4}$",
        "example": "john.doe@mail.com"
      },
      "PaymentMethodId": {
        "title": "PaymentMethodId",
        "type": "string",
        "description": "Payment method identifier (unique by Merchant).<br> It is set by the user during the creation of the payment method and cannot be modified afterward.<br> PaymentMethodId must:<br>\n  - Start and contain only an alphanumeric characters (A-Z, a-z, 0-9).<br>\n  - May include dots ('.'), hyphens ('-'), and underscores ('_').<br>\n  - Have a length between 1 and 50 characters.",
        "minimum": 1,
        "maximum": 50,
        "pattern": "^(?=.{1,50}$)[A-Za-z0-9]+[A-Za-z0-9\\.\\-_]+$",
        "example": "CB_001 or 123456"
      },
      "PaymentInstrumentRank": {
        "title": "PaymentInstrumentRank",
        "type": "integer",
        "description": "Specify the rank of the payment instrument in the wallet.<br> Set by default to the rank of the default instrument.<br> May be omitted if one single payment instrument is present in the wallet.",
        "maximum": 99,
        "minimum": 1,
        "example": 1
      },
      "Miscellaneous": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "description": "Additional data to be used throughout the payment lifecycle. A dictionary of key-value pairs where the values can only be strings e.g. ``` { \"suborderid\": \"AE-3023-001\", \"chanel\": \"mobile\" } ```.",
        "example": {
          "suborderid": "AE-3023-001",
          "chanel": "mobile"
        }
      },
      "Status": {
        "title": "Status",
        "type": "string",
        "description": "Status of an object. (ACTIVE or INACTIVE)",
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ],
        "example": "INACTIVE"
      },
      "StatusUpdateRequest": {
        "title": "StatusUpdateRequest",
        "type": "object",
        "description": "Update status request",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "StatusUpdateResult": {
        "title": "StatusUpdateResult",
        "type": "object",
        "description": "Update status response",
        "required": [
          "status"
        ],
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SessionResponse/properties/result/allOf/0"
              }
            ]
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        }
      },
      "SelectedNetwork": {
        "title": "SelectedNetwork",
        "type": "string",
        "maxLength": 30,
        "minLength": 2,
        "description": "Cardholder selected network for payment, specifically for cobranded cards.",
        "enum": [
          "AMERICAN_EXPRESS",
          "CETELEM",
          "CARTES_BANCAIRES",
          "COFINOGA",
          "DINERS_CLUB",
          "JCB",
          "MASTERCARD",
          "VISA"
        ],
        "example": "VISA"
      },
      "MXWalletId": {
        "title": "MXWalletId",
        "description": "MXWallet identifier (unique by Merchant)<br> MXWallet ID must:<br>\n  - Start and contain only an alphanumeric characters (A-Z, a-z, 0-9).<br>\n  - May include dots ('.'), hyphens ('-'), and underscores ('_').<br>\n  - Have a length between 1 and 50 characters.",
        "type": "string",
        "minimum": 1,
        "maximum": 50,
        "pattern": "^(?=.{1,50}$)[A-Za-z0-9]+[A-Za-z0-9\\.\\-_]+$",
        "example": "WALLET123"
      },
      "PaymentPlanId": {
        "type": "string",
        "description": "PaymentPlan identifier",
        "maxLength": 50,
        "minLength": 0,
        "example": "2111101"
      },
      "IP": {
        "maxLength": 256,
        "minLength": 0,
        "type": "string",
        "description": "IP Address (V4 and V6 are accepted).",
        "example": "127.0.0.1"
      },
      "BrowserUserAgent": {
        "maxLength": 2048,
        "minLength": 0,
        "type": "string",
        "description": "The \"UserAgent\" value of the buyer's browser contains a string uniquely identifying the browser and its version."
      },
      "ChallengeResult": {
        "type": "string",
        "description": "Base64-encoded json string containing the 3DS authentification response (cres message received by the merchant).",
        "example": "ewogICAgImFjc1RyYW5zSUQiOiAiYzRkZTNiMmEtMzJkMC00Y2U3LWI4ZDYtMjNkNWE1ZmQwZmM3IiwKICAgICJjaGFsbGVuZ2VXaW5kb3dTaXplIjogIjAzIiwKICAgICJtZXNzYWdlVHlwZSI6ICJDUmVxIiwKICAgICJtZXNzYWdlVmVyc2lvbiI6ICIyLjIuMCIsCiAgICAidGhyZWVEU1NlcnZlclRyYW5zSUQiOiAiMTNhNWQ4ZjItNDg5Ny01YzcwLTgwMDAtMDAwMDAwNTE0MzU5Igp9"
      },
      "TransientData": {
        "type": "string",
        "description": "A temporary container (Base64 encoded) that carries essential context information (e.g., the MPI cluster identifier or cloud mode data) between different steps of a 3DSecure exchange. <br> This data is not stored permanently but is transmitted from one request to the next to ensure continuity and proper routing of the transaction.",
        "example": "eyJQQVlMSU5FIjoiVTBsTVR6RT0ifQ=="
      },
      "ResultContainer": {
        "description": "Base64-encoded json string containing the 3DS authentication result parameters.",
        "type": "string",
        "example": "eyJjb250YWluZXJWZXJzaW9uIjoiMiIsImVjaSI6IjA3IiwiZWZmZWN0aXZlQXV0aFR5cGUiOiJDSCIsImFjc09wZXJhdG9ySUQiOiIzRFNfTE9BX0FDU19NT01EXzAyMDEwMF8wMDA2MSIsInRocmVlRFNSZXF1ZXN0b3JDaGFsbGVuZ2VJbmQiOiIwMSIsInRyYW5zU3RhdHVzIjoiWCIsInRyYW5zU3RhdHVzUmVhc29uIjoiMTQiLCJjaGFsbGVuZ2VDYW5jZWxJbmQiOiIwNSIsImRzVHJhbnNJRCI6ImMwZjUwYjg1LWE3YWQtNDVlZC04NmE3LTE3MTU5NzYzMDFmYSIsImFjc1RyYW5zSUQiOiJjNGRlM2IyYS0zMmQwLTRjZTctYjhkNi0yM2Q1YTVmZDBmYzciLCJtZXNzYWdlVmVyc2lvbiI6IjIuMi4wIiwidXNlQ2FzZSI6IjAxIiwibWVyY2hhbnROYW1lIjoiU0FSTCBKRUxPIENBIiwicHVyY2hhc2VEYXRlIjoiMjAyNTAzMTkwNzU4NDgiLCJwdXJjaGFzZUFtb3VudCI6IjEwMDAwIiwiY2FyZEJyYW5kIjoiVklTQSIsImJyb3dzZXJJUCI6IjEyNy4wLjAuMSIsImFjcXVpcmVyQklOIjoiNDk3NzY3IiwiYWNxdWlyZXJNZXJjaGFudElEIjoiOTcwMDAxIiwidGhyZWVEU1JlcXVlc3Rvck5hbWUiOiJTQVJMIEpFTE8gQ0EiLCJ0aHJlZURTUmVxdWVzdG9ySUQiOiI5NzAwMDEiLCJtZXJjaGFudENvdW50cnlDb2RlIjoiMjUwIn0"
      },
      "SoftDescriptor": {
        "title": "SoftDescriptor",
        "type": "string",
        "description": "This information will be shown on the payment receipt, allowing the merchant to provide a custom message. <br> Note that this field is not applicable for card payment methods as it will be overridden. <br> Please check the list of compatible payment methods [here](https://docs.monext.fr/display/DT/Les+moyens+de+paiements+Payline). <br> Special characters (not A..Z and 1..9) may be restricted depending on the acquirer or payment method. <br> Not supported by all acquirers. For more details, refer to the [Soft Descriptor (DSD)](https://docs.monext.fr/pages/viewpage.action?pageId=747144576).",
        "maxLength": 127,
        "minLength": 0,
        "example": "MY SHOP"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}